{"version":3,"file":"main.js","mappings":"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","sources":["webpack://pm/./apps/pm-backend/src/config/database.js","webpack://pm/./apps/pm-backend/src/controllers/admin.js","webpack://pm/./apps/pm-backend/src/controllers/conversations.js","webpack://pm/./apps/pm-backend/src/controllers/interests.js","webpack://pm/./apps/pm-backend/src/controllers/recommendations.js","webpack://pm/./apps/pm-backend/src/controllers/search.js","webpack://pm/./apps/pm-backend/src/controllers/shortlist.js","webpack://pm/./apps/pm-backend/src/controllers/users.js","webpack://pm/./apps/pm-backend/src/middleware/async.js","webpack://pm/./apps/pm-backend/src/middleware/error.js","webpack://pm/./apps/pm-backend/src/models/Users.js","webpack://pm/./apps/pm-backend/src/routes/admin.js","webpack://pm/./apps/pm-backend/src/routes/conversations.js","webpack://pm/./apps/pm-backend/src/routes/interests.js","webpack://pm/./apps/pm-backend/src/routes/recommendations.js","webpack://pm/./apps/pm-backend/src/routes/search.js","webpack://pm/./apps/pm-backend/src/routes/shortlist.js","webpack://pm/./apps/pm-backend/src/routes/users.js","webpack://pm/./apps/pm-backend/src/utilities/errorResponse.js","webpack://pm/external commonjs \"@okta/okta-sdk-nodejs\"","webpack://pm/external commonjs \"body-parser\"","webpack://pm/external commonjs \"cors\"","webpack://pm/external commonjs \"express\"","webpack://pm/external commonjs \"mongoose\"","webpack://pm/external commonjs \"tslib\"","webpack://pm/webpack/bootstrap","webpack://pm/./apps/pm-backend/src/main.js"],"sourcesContent":["const mongoose = require('mongoose');\r\n\r\nconst dbConnection = async () => {\r\n  console.log('Connecting to mongoDB...');\r\n  const connection = await mongoose.connect(process.env.MONGO_URI, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n  });\r\n  console.log(`MongoDB connection successful !`);\r\n};\r\n\r\nmodule.exports = dbConnection;\r\n","const asyncHandler = require('../middleware/async');\r\nconst User = require('../models/Users');\r\nconst CustomErrorResponse = require('../utilities/errorResponse');\r\nconst okta = require('@okta/okta-sdk-nodejs');\r\n\r\n//getting all users profiles\r\nexports.getAllUsersProfiles = asyncHandler(async (req, res, next) => {\r\n  try {\r\n    const allUsers = await User.find();\r\n    res.status(200).json({ user: allUsers });\r\n  } catch (error) {\r\n    return next(new CustomErrorResponse('Error! Please try later', 500));\r\n  }\r\n});\r\n","const asyncHandler = require('../middleware/async');\r\nconst User = require('../models/Users');\r\nconst CustomErrorResponse = require('../utilities/errorResponse');\r\nconst mongoose = require('mongoose');\r\n\r\n// @desc   Send a New Message\r\n// @route  POST /api/v1/conversations?receiver=\"receiverID\"&sender=\"senderID\"\r\n// @access Private\r\n// In One go...the message sent MUST be in \"conversations\" array of both user1 and user2.\r\n// Otherwise, consider that attempt to send message as failure. So a MongoDB/Mongoose Transaction must be used.\r\nexports.sendMessage = asyncHandler(async (req, res, next) => {\r\n  const oktaUserId1 = req.query.sender;\r\n  const oktaUserId2 = req.query.receiver;\r\n  // I want the message object to have SAME _id in both users\r\n  // This will help me to enable read receipts\r\n\r\n  const message = {\r\n    _id: new mongoose.Types.ObjectId(),\r\n    message: req.body.message,\r\n    messageSenderId: oktaUserId1,\r\n    messageReceiverId: oktaUserId2,\r\n    isRead: false,\r\n  };\r\n\r\n  const session = await User.startSession();\r\n\r\n  try {\r\n    session.startTransaction();\r\n\r\n    let user1 = await User.find({ oktaUserId: oktaUserId1 });\r\n    user1 = user1[0];\r\n    let user2 = await User.find({ oktaUserId: oktaUserId2 });\r\n    user2 = user2[0];\r\n\r\n    /**=============================================================== */\r\n    // User1 wants to send Message to User2\r\n\r\n    // NOTE: Messages are stored in an interest object's conversations property(array).\r\n\r\n    // STEP 1\r\n    // Determine if it is User1 who first sent the interest.\r\n    const didUser1SendInterestToUser2 = user1.interestsSent.some(\r\n      (interest) => String(interest.interestReceiverId) === oktaUserId2\r\n    );\r\n    // Determine if it is User1 who first received the interest.\r\n    const didUser1ReceiveInterestFromUser2 = user1.interestsReceived.some((interest) =>\r\n      String(interest.interestSenderId === oktaUserId2)\r\n    );\r\n    // If User1 is the first sender, then interest object will be in interestsSent Array\r\n    // If User1 is the first receiver, then interest object will be in interestsReceived Array\r\n    // Based on the location of interest object, update its conversations array...\r\n    if (didUser1SendInterestToUser2) {\r\n      // if user1 is the interest sender. So update interest object in interestsSent array of user 1\r\n      user1.interestsSent = user1.interestsSent.map((interest) => {\r\n        if (String(interest.interestReceiverId) === oktaUserId2) {\r\n          interest.conversations.push(message);\r\n        }\r\n        return interest;\r\n      });\r\n      // if user1 is the interest sender, then user2 is interest receiver.\r\n      // so interest object will be in user2's interestsReceived array\r\n      user2.interestsReceived = user2.interestsReceived.map((interest) => {\r\n        if (String(interest.interestSenderId) === oktaUserId1) {\r\n          interest.conversations.push(message);\r\n        }\r\n        return interest;\r\n      });\r\n    } else if (didUser1ReceiveInterestFromUser2) {\r\n      // user1 is interest receiver. Hence, update interest object in interestsReceived array of user1\r\n      user1.interestsReceived = user1.interestsReceived.map((interest) => {\r\n        if (String(interest.interestSenderId) === oktaUserId2) {\r\n          interest.conversations.push(message);\r\n        }\r\n        return interest;\r\n      });\r\n      // if user1 is the interest receiver.\r\n      // then user2 is the interest sender. So update interest object in interestsSent array of user2\r\n      user2.interestsSent = user2.interestsSent.map((interest) => {\r\n        if (String(interest.interestReceiverId) === oktaUserId1) {\r\n          interest.conversations.push(message);\r\n        }\r\n        return interest;\r\n      });\r\n    } else {\r\n      // If interest object is not present in both, then message cant be sent.\r\n      throw `Permission denied.`;\r\n    }\r\n    /**=============================================================== */\r\n    await user1.save();\r\n    await user2.save();\r\n\r\n    await session.commitTransaction();\r\n    session.endSession();\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Message sent !',\r\n    });\r\n  } catch (error) {\r\n    // If an error occurred, abort the whole transaction and\r\n    // undo any changes that might have happened\r\n    // console.log(error);\r\n    await session.abortTransaction();\r\n    session.endSession();\r\n    return next(new CustomErrorResponse('Message not sent! Please try later', 500));\r\n  }\r\n});\r\n\r\n// @desc   Mark all messages between two users as \"Read\"\r\n// @route  PUT /api/v1/conversations?user1=\"oktaUserId1\"&user2=\"oktaUserId2\"\r\n// @access Private\r\nexports.markMessagesAsRead = asyncHandler(async (req, res, next) => {\r\n  const oktaUserId1 = req.query.user1;\r\n  const oktaUserId2 = req.query.user2;\r\n\r\n  const session = await User.startSession();\r\n  try {\r\n    session.startTransaction();\r\n\r\n    let user1 = await User.find({ oktaUserId: oktaUserId1 });\r\n    user1 = user1[0];\r\n    let user2 = await User.find({ oktaUserId: oktaUserId2 });\r\n    user2 = user2[0];\r\n\r\n    // STEP 1\r\n    // Determine if it is User1 who first sent the interest.\r\n    const didUser1SendInterestToUser2 = user1.interestsSent.some(\r\n      (interest) => String(interest.interestReceiverId) === oktaUserId2\r\n    );\r\n    // Determine if it is User1 who first received the interest.\r\n    const didUser1ReceiveInterestFromUser2 = user1.interestsReceived.some((interest) =>\r\n      String(interest.interestSenderId === oktaUserId2)\r\n    );\r\n\r\n    if (didUser1SendInterestToUser2) {\r\n      // if User1 sent interest to User2, then...\r\n      // 1. Identify the interest object specific to user2 in interestsSent array of user1\r\n      // 2. Then update the conversations array of that object, mark all messages as read.\r\n      // 3. Also, find the interest object specific to user 1 in interestsReceived array of user2\r\n      // 4. Update conversations array of that object by marking all messages as read.\r\n      user1.interestsSent = user1.interestsSent.map((interest) => {\r\n        if (String(interest.interestReceiverId) === user2.id) {\r\n          // marking all unread messages as read.\r\n          interest.conversations = interest.conversations.map((message) => {\r\n            if (!message.isRead) {\r\n              message.isRead = true;\r\n            }\r\n            return message;\r\n          });\r\n        }\r\n        return interest;\r\n      });\r\n\r\n      user2.interestsReceived = user2.interestsReceived.map((interest) => {\r\n        if (String(interest.interestSenderId) === user1.id) {\r\n          // marking all messages as read.\r\n          interest.conversations = interest.conversations.map((message) => {\r\n            if (!message.isRead) {\r\n              message.isRead = true;\r\n            }\r\n            return message;\r\n          });\r\n        }\r\n        return interest;\r\n      });\r\n    } else if (didUser1ReceiveInterestFromUser2) {\r\n      // if User1 sent received interest from User2, then...\r\n      // 1. Identify the interest object specific to user2 in interestsReceived array of user1\r\n      // 2. Then update the conversations array of that object, mark all messages as read.\r\n      // 3. Also, find the interest object specific to user 1 in interestsSent array of user2\r\n      // 4. Update conversations array of that object by marking all messages as read.\r\n      user1.interestsReceived = user1.interestsReceived.map((interest) => {\r\n        if (String(interest.interestSenderId) === user2.id) {\r\n          // marking all messages as read.\r\n          interest.conversations = interest.conversations.map((message) => {\r\n            if (!message.isRead) {\r\n              message.isRead = true;\r\n            }\r\n            return message;\r\n          });\r\n        }\r\n        return interest;\r\n      });\r\n\r\n      user2.interestsSent = user2.interestsSent.map((interest) => {\r\n        if (String(interest.interestReceiverId) === user1.id) {\r\n          interest.conversations = interest.conversations.map((message) => {\r\n            // marking all messages as read.\r\n            if (!message.isRead) {\r\n              message.isRead = true;\r\n            }\r\n            return message;\r\n          });\r\n        }\r\n        return interest;\r\n      });\r\n    } else {\r\n      throw 'Permission denied.';\r\n    }\r\n\r\n    await user1.save();\r\n    await user2.save();\r\n  } catch (error) {\r\n    // If an error occurred, abort the whole transaction and\r\n    // undo any changes that might have happened\r\n    // console.log(error);\r\n    await session.abortTransaction();\r\n    session.endSession();\r\n    return next(new CustomErrorResponse('Error! Please try later', 500));\r\n  }\r\n\r\n  res.status(200).json({\r\n    success: true,\r\n    message: 'Messages marked as read !',\r\n  });\r\n});\r\n\r\n// @desc   Get all messages between two users as \"Read\"\r\n// @route  GET /api/v1/conversations/:oktaUserId\r\n// @access Private\r\n\r\nexports.getMessages = asyncHandler(async (req, res, next) => {\r\n  try {\r\n    let user = await User.find({ oktaUserId: req.params.oktaUserId });\r\n    user = user[0];\r\n\r\n    if (!user) {\r\n      return next(new CustomErrorResponse(`User not found!`, 404));\r\n    }\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Data Retrieved Successfull !',\r\n      interestsReceived: [...user.interestsReceived],\r\n      interestsSent: [...user.interestsSent],\r\n    });\r\n  } catch (error) {\r\n    return next(new CustomErrorResponse(`Error! Please try later`, 500));\r\n  }\r\n});\r\n","const asyncHandler = require('../middleware/async');\r\nconst User = require('../models/Users');\r\nconst CustomErrorResponse = require('../utilities/errorResponse');\r\nconst mongoose = require('mongoose');\r\n\r\n// @desc   Send a New Interest\r\n// @route  POST /api/v1/interests?sender=oktaUserId1&receiver=oktaUserId2\r\n// @access Private\r\n\r\n// In One go...the interest sent MUST be in \"interestsSent\" array of Sender and \"interestsReceived\" array of Receiver.\r\n// Otherwise, consider that attempt to send interest as failure. So a MongoDB/Mongoose Transaction must be used.\r\n\r\nexports.sendInterest = asyncHandler(async (req, res, next) => {\r\n  const oktaUserId1 = req.query.sender;\r\n  const oktaUserId2 = req.query.receiver;\r\n  const session = await User.startSession();\r\n\r\n  try {\r\n    session.startTransaction();\r\n\r\n    let user1 = await User.find({ oktaUserId: oktaUserId1 });\r\n    user1 = user1[0];\r\n    let user2 = await User.find({ oktaUserId: oktaUserId2 });\r\n    user2 = user2[0];\r\n\r\n    /**=============================================================== */\r\n    // User1 wants to send Interest to User2\r\n\r\n    // NOTE: Interests are stored as objects in interestsSender array of Sender(User1)\r\n    // & also in interestsReceived array of Receiver(User2).\r\n\r\n    // Step 1: Determine if User1 already send or received interest to/from User 2 ?\r\n    // If Yes, then throw error that You've already sent/received interest to User 2\r\n\r\n    // Checking interestsSent and interestsReceived array of User1\r\n    const didUser1AlreadySendInterestToUser2 = user1.interestsSent.some(\r\n      (interest) => String(interest.interestReceiverId) === oktaUserId2\r\n    );\r\n\r\n    if (didUser1AlreadySendInterestToUser2) {\r\n      await session.abortTransaction();\r\n      session.endSession();\r\n      return next(new CustomErrorResponse(`Interest already sent to ${user2.name}. Please wait for response.`, 400));\r\n    }\r\n\r\n    const didUser1AlreadyReceiveInterestFromUser2 = user1.interestsReceived.some(\r\n      (interest) => String(interest.interestSenderId) === oktaUserId2\r\n    );\r\n\r\n    if (didUser1AlreadyReceiveInterestFromUser2) {\r\n      await session.abortTransaction();\r\n      session.endSession();\r\n      return next(new CustomErrorResponse(`Interest already received from ${user2.name}. Please respond to it.`, 400));\r\n    }\r\n\r\n    // If Not sent Interest before, then...\r\n    // put the interest object in interestsSent array of User1\r\n    user1.interestsSent.push({\r\n      conversations: [],\r\n      interestSenderAge: user1.age,\r\n      interestSenderId: user1.id,\r\n      interestSenderImage: user1.images[0] || 'link to placeholder image',\r\n      interestSenderName: user1.name,\r\n      interestReceiverAge: user2.age,\r\n      interestReceiverId: user2.id,\r\n      interestReceiverImage: user2.images[0] || 'link to placeholder image',\r\n      interestReceiverName: user2.name,\r\n      isAccepted: false,\r\n      isRejected: false,\r\n    });\r\n\r\n    // Also...\r\n    // Put the same interest object in interestsReceived array of User2\r\n    user2.interestsReceived.push({\r\n      conversations: [],\r\n      interestSenderAge: user1.age,\r\n      interestSenderId: user1.id,\r\n      interestSenderImage: user1.images[0] || 'link to placeholder image',\r\n      interestSenderName: user1.name,\r\n      interestReceiverAge: user2.age,\r\n      interestReceiverId: user2.id,\r\n      interestReceiverImage: user2.images[0] || 'link to placeholder image',\r\n      interestReceiverName: user2.name,\r\n      isAccepted: false,\r\n      isRejected: false,\r\n    });\r\n\r\n    /**=============================================================== */\r\n    await user1.save();\r\n    await user2.save();\r\n\r\n    await session.commitTransaction();\r\n    session.endSession();\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Interest sent!',\r\n    });\r\n  } catch (error) {\r\n    // If an error occurred, abort the whole transaction and\r\n    // undo any changes that might have happened\r\n    // console.log(error);\r\n    await session.abortTransaction();\r\n    session.endSession();\r\n    return next(new CustomErrorResponse('Interest not sent. Please try later!', 500));\r\n  }\r\n});\r\n\r\n// @desc   Accept an Interest\r\n// @route  PUT /api/v1/interests/accept?sender=oktaUserId1&receiver=oktaUserId2\r\n// @access Private\r\n\r\n// In One go... isAccepted property in interest object must be updated to \"true\" for\r\n// both sender and receiver.\r\n// User1 is interest Sender. Interest object will be in interestsSent array of User 1\r\n// User2 is interest Receiver. Interest object will be in interestsReceived array of User 2\r\n// User2 can accept interest. Because User2 \"received\" the interest.\r\n// When he does that... update isAccepted to \"true\" for both\r\nexports.acceptInterest = asyncHandler(async (req, res, next) => {\r\n  const oktaUserId1 = req.query.sender;\r\n  const oktaUserId2 = req.query.receiver;\r\n  const session = await User.startSession();\r\n\r\n  try {\r\n    session.startTransaction();\r\n\r\n    let user1 = await User.find({ oktaUserId: oktaUserId1 });\r\n    user1 = user1[0];\r\n    let user2 = await User.find({ oktaUserId: oktaUserId2 });\r\n    user2 = user2[0];\r\n    /**=============================================================== */\r\n\r\n    user2.interestsReceived = user2.interestsReceived.map((interest) => {\r\n      // First identify the interest object which must be updated.\r\n      if (String(interest.interestSenderId) === user1.id) {\r\n        interest.isAccepted = true;\r\n      }\r\n      return interest;\r\n    });\r\n\r\n    // Also...\r\n    // Put update same interest object in interestsSent array of User1\r\n\r\n    user1.interestsSent = user1.interestsSent.map((interest) => {\r\n      // First identify the interest object to be updated.\r\n      if (String(interest.interestReceiverId) === user2.id) {\r\n        interest.isAccepted = true;\r\n      }\r\n      return interest;\r\n    });\r\n\r\n    /**=============================================================== */\r\n    await user1.save();\r\n    await user2.save();\r\n\r\n    await session.commitTransaction();\r\n    session.endSession();\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Interest accepted!',\r\n    });\r\n  } catch (error) {\r\n    // If an error occurred, abort the whole transaction and\r\n    // undo any changes that might have happened\r\n    // console.log(error);\r\n    await session.abortTransaction();\r\n    session.endSession();\r\n    return next(new CustomErrorResponse('Error accepting interest. Please try later!', 500));\r\n  }\r\n});\r\n\r\n// @desc   Decline an Interest\r\n// @route  PUT /api/v1/interests/decline?sender=oktaUserId1&receiver=oktaUserId2\r\n// @access Private\r\n\r\n// Receiver of an interest can decline an interest.\r\n// User 1 is sender & User 2 is receiver.\r\n// So, update isRejected to \"true\" in interest object in interestsReceived array of User2\r\n// Also, update isRejected to \"true\" in interest object in interestsSent array of User1\r\nexports.declineInterest = asyncHandler(async (req, res, next) => {\r\n  const oktaUserId1 = req.query.sender;\r\n  const oktaUserId2 = req.query.receiver;\r\n  const session = await User.startSession();\r\n\r\n  try {\r\n    session.startTransaction();\r\n\r\n    const user1 = await User.find({ oktaUserId: oktaUserId1 })[0];\r\n    const user2 = await User.find({ oktaUserId: oktaUserId2 })[0];\r\n    /**=============================================================== */\r\n\r\n    user2.interestsReceived = user2.interestsReceived.map((interest) => {\r\n      // First identify the interest object which must be updated.\r\n      if (String(interest.interestSenderId) === user1.id) {\r\n        interest.isRejected = true;\r\n      }\r\n      return interest;\r\n    });\r\n\r\n    // Also...\r\n    // Put update same interest object in interestsSent array of User1\r\n\r\n    user1.interestsSent = user1.interestsSent.map((interest) => {\r\n      // First identify the interest object to be updated.\r\n      if (String(interest.interestReceiverId) === user2.id) {\r\n        interest.isRejected = true;\r\n      }\r\n      return interest;\r\n    });\r\n\r\n    /**=============================================================== */\r\n    await user1.save();\r\n    await user2.save();\r\n\r\n    await session.commitTransaction();\r\n    session.endSession();\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Interest rejected!',\r\n    });\r\n  } catch (error) {\r\n    // If an error occurred, abort the whole transaction and\r\n    // undo any changes that might have happened\r\n    // console.log(error);\r\n    await session.abortTransaction();\r\n    session.endSession();\r\n    return next(new CustomErrorResponse('Error rejecting interest. Please try later!', 500));\r\n  }\r\n});\r\n","const asyncHandler = require('../middleware/async');\r\nconst User = require('../models/Users');\r\nconst CustomErrorResponse = require('../utilities/errorResponse');\r\n\r\n// @desc   Get Recommendations\r\n// @route  GET /api/v1/recommendations?oktaUserId=oktaUserId\r\n// @access Private\r\nexports.getRecommendations = asyncHandler(async (req, res, next) => {\r\n  try {\r\n    const currentUser = await User.find({ oktaUserId: req.params.oktaUserId });\r\n\r\n    if (!currentUser) {\r\n      return next(new CustomErrorResponse(`User not found!`, 404));\r\n    }\r\n\r\n    const currentUserGender = currentUser[0].gender;\r\n    const currentUserAge = currentUser[0].age;\r\n    const currentUserReligion = currentUser[0].religion;\r\n\r\n    const profiles = await User.find({ gender: { $ne: currentUserGender } }).exec();\r\n\r\n    //Recommendations based on gender, age and religion\r\n    const recommendations = profiles.filter((profile) => {\r\n      return (\r\n        (currentUserGender === 'male' ? profile.age <= currentUserAge : profile.age >= currentUserAge) &&\r\n        (currentUserReligion ? profile.religion === currentUserReligion : true)\r\n      );\r\n    });\r\n\r\n    console.log('No. of Recommendations: ', recommendations.length);\r\n\r\n    if (recommendations.length < 1) {\r\n      res.status(200).json({\r\n        success: false,\r\n        message: 'Recommendations not found. Please update your age and religion to get recommendations.',\r\n        number: recommendations.length,\r\n        data: recommendations,\r\n      });\r\n      return;\r\n    }\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Recommendations found.',\r\n      number: recommendations.length,\r\n      data: recommendations,\r\n    });\r\n  } catch (error) {\r\n    return next(new CustomErrorResponse('Error!. Please try later!', 500));\r\n  }\r\n});\r\n","const asyncHandler = require('../middleware/async');\r\nconst User = require('../models/Users');\r\nconst CustomErrorResponse = require('../utilities/errorResponse');\r\n\r\nconst MINIMUM_HEIGHT_IN_CMS = 122;\r\nconst MAXIMUM_HEIGHT_IN_CMS = 214;\r\nconst MINIMUM_ALLOWED_AGE = 21;\r\nconst MAXIMUM_ALLOWED_AGE = 50;\r\n\r\n// @desc   Search Profiles\r\n// @route  POST /api/v1/users/search/:oktaUserId\r\n// @access Private\r\n\r\nexports.searchProfiles = asyncHandler(async (req, res, next) => {\r\n  try {\r\n    const currentUser = await User.find({ oktaUserId: req.params.oktaUserId });\r\n\r\n    if (!currentUser) {\r\n      return next(new CustomErrorResponse(`User not found!`, 404));\r\n    }\r\n\r\n    const currentUserGender = currentUser[0].gender;\r\n\r\n    const searchCriteria = req.body;\r\n    // Remove properties with 'undefined' & \"null\" values before perfmorming search in DB\r\n    Object.keys(searchCriteria).forEach((key) => {\r\n      if (searchCriteria[key] === undefined || searchCriteria[key] === null) {\r\n        delete searchCriteria[key];\r\n      }\r\n    });\r\n\r\n    const { ageRange, city, country, heightRange, religion, marriageStatus, motherTongue, state } = searchCriteria;\r\n\r\n    const minAge = ageRange === undefined ? MINIMUM_ALLOWED_AGE : ageRange[0];\r\n    const maxAge = ageRange === undefined ? MAXIMUM_ALLOWED_AGE : ageRange[1];\r\n    const minHeight = heightRange === undefined ? MINIMUM_HEIGHT_IN_CMS : heightRange[0];\r\n    const maxHeight = heightRange === undefined ? MAXIMUM_HEIGHT_IN_CMS : heightRange[1];\r\n\r\n    // get profiles of opposite gender.\r\n    const profiles = await User.find({ gender: { $ne: currentUserGender } }).exec();\r\n\r\n    // filter opposite gender profiles as per search preferences.\r\n    const matchingProfiles = profiles.filter((profile) => {\r\n      return (\r\n        profile.age >= minAge &&\r\n        profile.age <= maxAge &&\r\n        profile.height >= minHeight &&\r\n        profile.height <= maxHeight &&\r\n        (city ? profile.location === city : true) &&\r\n        (country ? profile.country === country : true) &&\r\n        (motherTongue ? profile.motherTongue === motherTongue : true) &&\r\n        (marriageStatus ? profile.marriageStatus === marriageStatus : true) &&\r\n        (religion ? profile.religion === religion : true) &&\r\n        (state ? profile.state === state : true)\r\n      );\r\n    });\r\n\r\n    console.log('No. of Matches: ', matchingProfiles.length);\r\n\r\n    if (matchingProfiles.length < 1) {\r\n      res.status(200).json({\r\n        success: false,\r\n        message: 'Matches not found. Please adjust your search criteria',\r\n        number: matchingProfiles.length,\r\n        data: matchingProfiles,\r\n      });\r\n      return;\r\n    }\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Matches found.',\r\n      number: matchingProfiles.length,\r\n      data: matchingProfiles,\r\n    });\r\n  } catch (error) {\r\n    return next(new CustomErrorResponse('Error!. Please try later!', 500));\r\n  }\r\n});\r\n","const asyncHandler = require('../middleware/async');\r\nconst User = require('../models/Users');\r\nconst CustomErrorResponse = require('../utilities/errorResponse');\r\nconst okta = require('@okta/okta-sdk-nodejs');\r\n\r\n// @desc   Shortlist Profiles\r\n// @route  PUT /api/v1/toggleShortlist?shortlister=oktaUserId1&shorlistee=oktaUserId2\r\n// @access Private\r\nexports.toggleShortlist = asyncHandler(async (req, res, next) => {\r\n  const shortlisterOktaId = req.query.shortlister;\r\n  const shortlisteeOktaId = req.query.shortlistee;\r\n  console.log(shortlisterOktaId);\r\n  console.log(shortlisteeOktaId);\r\n\r\n  try {\r\n    // user who wants to shortlist\r\n    let shortlister = await User.find({ oktaUserId: shortlisterOktaId });\r\n    shortlister = shortlister[0];\r\n\r\n    const { shortlistedMatches } = shortlister;\r\n\r\n    // user who is being shortlisted\r\n    let shortlistee = await User.find({ oktaUserId: shortlisteeOktaId });\r\n    shortlistee = shortlistee[0];\r\n\r\n    // Did shortlister already shortlist shortlistee ?\r\n    const wasAlreadyShortlisted = shortlister.shortlistedMatches.some((oktaId) => oktaId === shortlisteeOktaId);\r\n    // console.log(wasAlreadyShortlisted);\r\n\r\n    if (wasAlreadyShortlisted) {\r\n      // If Yes... then remove from shortlist\r\n      shortlister.shortlistedMatches = shortlister.shortlistedMatches.filter((oktaId) => oktaId !== shortlisteeOktaId);\r\n    } else {\r\n      // If No, then shortlist\r\n      shortlister.shortlistedMatches = [...shortlistedMatches, shortlisteeOktaId];\r\n    }\r\n\r\n    await shortlister.save();\r\n\r\n    const message = wasAlreadyShortlisted\r\n      ? `${shortlistee.name} has been removed from your shortlist`\r\n      : `${shortlistee.name} was added to your shortlisted profiles`;\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message,\r\n    });\r\n  } catch (error) {\r\n    return next(new CustomErrorResponse('Please try later', 500));\r\n  }\r\n});\r\n","const asyncHandler = require('../middleware/async');\r\nconst User = require('../models/Users');\r\nconst CustomErrorResponse = require('../utilities/errorResponse');\r\nconst okta = require('@okta/okta-sdk-nodejs');\r\n\r\n// @desc   Register a new Profile\r\n// @route  POST /api/v1/users/\r\n// @access Public\r\n\r\nexports.registerUserProfile = asyncHandler(async (req, res, next) => {\r\n  // connect with okta here ?!\r\n  const user = await User.create(req.body);\r\n  res.status(201).json({ success: true, message: 'New user is created.', data: user });\r\n});\r\n/** ----------------------------------------- */\r\n\r\n//creating user inside mongodb with oktaInformation.\r\nconst createUserInMongoDB = async (mongoUser) => {\r\n  const user = await User.create(mongoUser);\r\n  return user;\r\n};\r\n\r\n//signing up user into okta\r\nexports.oktaSignUp = asyncHandler(async (req, res, next) => {\r\n  const client = new okta.Client({\r\n    orgUrl: 'https://dev-42684472.okta.com/',\r\n    token: '00TW3soK2Eq883PaRVu5rjqRniqE6iaueZOivSe91P',\r\n  });\r\n  const body = req.body;\r\n  try {\r\n    await createUserInOkta();\r\n    async function createUserInOkta() {\r\n      const response = await client.createUser(body);\r\n\r\n      //will update it with destructure\r\n      const oktaId = response.id;\r\n      const name = `${response.profile.firstName} ${response.profile.lastName}`;\r\n      const gender = response.profile.gender;\r\n      const email = response.profile.email;\r\n\r\n      const mongoUser = {\r\n        oktaUserId: oktaId,\r\n        name,\r\n        gender,\r\n        email,\r\n      };\r\n\r\n      await createUserInMongoDB(mongoUser);\r\n\r\n      res.send({\r\n        res: response,\r\n      });\r\n    }\r\n    await createUserInOkta();\r\n    // not using await will cause breakdown of express server\r\n    // whenever there is any error while trying to create user in Okta.\r\n  } catch (err) {\r\n    return next(new CustomErrorResponse(err, 404));\r\n    // res.send({\r\n    //   err: err,\r\n    // });\r\n  }\r\n});\r\n\r\n//find user in mongodb by oktaId\r\nasync function findUserByOktaId(oktaId) {\r\n  const currentUser = await User.find({ oktaUserId: oktaId });\r\n  // console.log(currentUser);\r\n  // console.log(currentUser[0]._id.toString());\r\n  return currentUser;\r\n}\r\n\r\n// @desc   Retrieve a user Profile\r\n// @route  GET /api/v1/users/:id\r\n// @access Private\r\nexports.getUserProfile = asyncHandler(async (req, res, next) => {\r\n  const params = req.params;\r\n  const oktaId = params.id;\r\n  const currentUser = await findUserByOktaId(oktaId);\r\n  if (!currentUser) {\r\n    return next(new CustomErrorResponse(`User not found!`, 404));\r\n  }\r\n  res.status(200).json({ currentUser });\r\n});\r\n\r\n//to upload image in mongodb\r\nexports.uploadImageToMongoDb = asyncHandler(async (req, res, next) => {\r\n  const imageUrl = req.body.imageUrlString;\r\n  const currentUserId = req.body.oktaUserId;\r\n  const currentUser = await findUserByOktaId(currentUserId);\r\n  // console.log(currentUser[0].images);\r\n  const imageUrls = currentUser[0].images;\r\n  if (!currentUser) {\r\n    return next(new CustomErrorResponse(`User not found!`, 404));\r\n  }\r\n  await User.updateOne({ oktaUserId: currentUserId }, { images: [...imageUrls, imageUrl] });\r\n  res.status(200).json({ status: 'success' });\r\n\r\n  // res.status(200).json({\r\n  //   success: true,\r\n  //   message: 'Retrieved User successfully',\r\n  //   user: user,\r\n  // });\r\n});\r\n\r\n/** ----------------------------------------- */\r\nexports.updateUserProfile = asyncHandler(async (req, res, next) => {\r\n  const currentUserId = req.params.userId;\r\n\r\n  //getting mongodbId using oktaUserId\r\n  // const user = await findUserByOktaId(currentUserId);\r\n  // const mongoId = user[0]._id.toString()\r\n  // console.log(mongoId);\r\n\r\n  if (!currentUserId) {\r\n    return next(new CustomErrorResponse(`Can't update data of non-existent user`, 400));\r\n  }\r\n  await User.updateOne({ oktaUserId: currentUserId }, { $set: req.body });\r\n  res.status(200).json({\r\n    success: true,\r\n    message: 'Updated User successfully',\r\n    data: 'user',\r\n  });\r\n});\r\n\r\n/** ----------------------------------------- */\r\n\r\n// @desc   Search Profiles\r\n// @route  GET /api/v1/users/search/\r\n// @access Private\r\n\r\nexports.searchProfiles = asyncHandler(async (req, res, next) => {\r\n  const searchCriteria = req.body;\r\n\r\n  // NOTE : WORK IN PROGRESS....\r\n\r\n  // Remove properties with 'undefined' values before perfmorming search in DB\r\n  Object.keys(searchCriteria).forEach((key) => {\r\n    if (searchCriteria[key] === undefined) {\r\n      delete searchCriteria[key];\r\n    }\r\n  });\r\n\r\n  let matchingProfiles = await User.find({ name: 'john', age: { $gte: 18 } }).exec();\r\n\r\n  // console.log(matchingProfiles);\r\n\r\n  if (matchingProfiles.length < 1) {\r\n    return next(new CustomErrorResponse(`Could not find matching profiles`, 400));\r\n  }\r\n\r\n  res.status(200).json({\r\n    success: true,\r\n    message: 'Updated User successfully',\r\n    data: matchingProfiles,\r\n  });\r\n});\r\n\r\n//for the admin part\r\n// exports.getAllUsersProfiles = asyncHandler(async (req, res, next) => {\r\n\r\n//   const allUsers = await User.find();\r\n\r\n//   res.status(200).json({ user: allUsers });\r\n// })\r\n","const asyncHandler = fn => (req, res, next) => {\r\n  Promise.resolve(fn(req, res, next)).catch(next);\r\n};\r\n\r\nmodule.exports = asyncHandler;\r\n\r\n// This asyncHanlder() will wrap around all controller methods which do DB operations...\r\n// If there is an error in DB Operation, asyncHandler() catches that error...\r\n// Then passes it to errorHandler() middleware...\r\n// Then the errorHandler middleware gives JSON as response.\r\n","// All Errors in this Express Application come here...\r\n// as errorHandler() is middleware function...\r\n// This helps send a customized response after identifying the error.\r\nconst ErrorResponse = require('../utilities/errorResponse');\r\nconst errorHandler = (err, req, res, next) => {\r\n  let error = { ...err };\r\n  error.message = err.message;\r\n\r\n  // Duplicate Phone/Email Used while Registration\r\n  if (err.code === 11000) {\r\n    const message = `Email / Phone already used for registration.`;\r\n    error = new ErrorResponse(message, 400); // 400 = bad request\r\n  }\r\n\r\n  if (err.code === \"E0000001\") {\r\n    const message = `password: This password was found in a list of commonly used passwords. Please try another password.`;\r\n    error = new ErrorResponse(message, 400); // 400 = bad request\r\n  }\r\n\r\n  // Mongoose validation error\r\n  if (err.name === 'ValidationError') {\r\n    const message = Object.values(err.errors).map((val) => val.message);\r\n    console.log(message);\r\n    error = new ErrorResponse(message.join(' & '), 400);\r\n  }\r\n\r\n  res.status(error.statusCode || 500).json({\r\n    success: false,\r\n    error: error.message || 'Server Error',\r\n  });\r\n};\r\n\r\nmodule.exports = errorHandler;\r\n","const mongoose = require('mongoose');\r\n\r\nconst MessageSchema = new mongoose.Schema({\r\n  messageSenderId: {\r\n    type: String,\r\n    trim: true,\r\n  },\r\n  messageReceiverId: {\r\n    type: String,\r\n    trim: true,\r\n  },\r\n  message: {\r\n    type: String,\r\n    trim: true,\r\n    maxlength: [500, 'Message can not be more than 500 characters'],\r\n  },\r\n  isRead: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  timeStamp: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n});\r\n\r\nconst UserSchema = new mongoose.Schema({\r\n  name: {\r\n    type: String,\r\n    trim: true,\r\n    required: [true, 'Name is missing!'],\r\n    maxlength: [50, 'Name can not be more than 50 characters'],\r\n  },\r\n  gender: {\r\n    type: String,\r\n    required: [true, 'Gender is missing!'],\r\n    trim: true,\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: [true, 'Email is missing!'],\r\n    unique: true,\r\n    match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/, 'Please add a valid email'],\r\n  },\r\n  oktaUserId: {\r\n    type: String,\r\n    unique: true,\r\n    required: [true, 'Okta User Id is missing !'],\r\n  },\r\n  images: {\r\n    type: [String],\r\n    default: [],\r\n  },\r\n\r\n  // Personal Information\r\n\r\n  aboutMe: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  age: {\r\n    type: Number,\r\n    trim: true,\r\n    default: 21,\r\n  },\r\n  height: {\r\n    type: Number,\r\n    trim: true,\r\n    default: 140,\r\n  },\r\n  weight: {\r\n    type: Number,\r\n    trim: true,\r\n  },\r\n  physique: {\r\n    type: String,\r\n    default: '',\r\n    trim: true,\r\n  },\r\n  motherTongue: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  marriageStatus: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  citizenship: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  country: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  state: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  location: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  eatingHabits: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  smokingHabits: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  drinkingHabits: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  hobbies: {\r\n    type: [String],\r\n    default: [],\r\n  },\r\n  spokenLanguages: {\r\n    type: [String],\r\n    default: [],\r\n  },\r\n\r\n  // Education & Occupation Details\r\n\r\n  employer: {\r\n    type: String,\r\n    default: '',\r\n  },\r\n  income: {\r\n    type: Number,\r\n  },\r\n  occupation: {\r\n    type: String,\r\n    default: '',\r\n  },\r\n  qualification: {\r\n    type: String,\r\n    default: '',\r\n  },\r\n\r\n  // Family Details\r\n\r\n  aboutFamily: {\r\n    type: String,\r\n    default: '',\r\n  },\r\n  brothers: {\r\n    type: Number,\r\n  },\r\n  familyStatus: {\r\n    type: String,\r\n    default: '',\r\n  },\r\n  marriedBrothers: {\r\n    type: Number,\r\n  },\r\n  marriedSisters: {\r\n    type: Number,\r\n  },\r\n  sisters: {\r\n    type: Number,\r\n  },\r\n\r\n  // Religious Details\r\n\r\n  dateOfBirth: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  timeOfBirth: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  gothram: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  placeOfBirth: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  religion: {\r\n    type: String,\r\n    trim: true,\r\n  },\r\n\r\n  zodiacSign: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n\r\n  // Preference Details\r\n\r\n  partnerAgeRange: {\r\n    type: [Number],\r\n    default: [21, 50],\r\n  },\r\n  partnerCountry: {\r\n    type: String,\r\n    default: '',\r\n  },\r\n  partnerEatingHabits: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  partnerHeightRange: {\r\n    type: [Number],\r\n    default: [],\r\n  },\r\n  partnerIncomeRange: {\r\n    type: [Number],\r\n    default: [],\r\n  },\r\n  partnerMaritalStatus: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  partnerMotherTongue: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  partnerReligion: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n\r\n  phone: {\r\n    type: String,\r\n    default: '',\r\n    trim: true,\r\n    maxlength: [20, 'Phone number can not be longer than 20 characters'],\r\n  },\r\n  createdAt: {\r\n    type: Date,\r\n    default: Date.now(),\r\n  },\r\n  lastModifiedAt: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n  role: {\r\n    type: String,\r\n    default: 'User',\r\n    enum: ['User', 'Admin'],\r\n  },\r\n\r\n  //store mongoDB Ids of all shortlisted users.\r\n  shortlistedMatches: {\r\n    type: [String],\r\n    default: [],\r\n  },\r\n\r\n  // for each interest received... a unique object is created.\r\n  // Subsequent messages \"to & from\" the sender are stored in conversations array inside the object.\r\n  interestsReceived: [\r\n    {\r\n      interestSenderAge: { type: Number },\r\n      interestSenderId: { type: String },\r\n      interestSenderImage: { type: String },\r\n      interestSenderName: { type: String },\r\n      interestReceiverAge: { type: Number },\r\n      interestReceiverId: { type: String },\r\n      interestReceiverImage: { type: String },\r\n      interestReceiverName: { type: String },\r\n      isAccepted: { type: Boolean, default: false },\r\n      isRejected: { type: Boolean, default: false },\r\n      conversations: [MessageSchema],\r\n    },\r\n  ],\r\n\r\n  // for each interest sent... a unique object is created...\r\n  // Subsequent messages \"to & from\" the receiver are stored in conversations array inside the object\r\n  interestsSent: [\r\n    {\r\n      interestSenderAge: { type: Number },\r\n      interestSenderId: { type: String },\r\n      interestSenderImage: { type: String },\r\n      interestSenderName: { type: String },\r\n      interestReceiverAge: { type: Number },\r\n      interestReceiverId: { type: String },\r\n      interestReceiverImage: { type: String },\r\n      interestReceiverName: { type: String },\r\n      isAccepted: { type: Boolean, default: false },\r\n      isRejected: { type: Boolean, default: false },\r\n      conversations: [MessageSchema],\r\n    },\r\n  ],\r\n});\r\n\r\nmodule.exports = mongoose.model('User', UserSchema);\r\n","const express = require('express');\r\n\r\n//importing controllers\r\nconst { getAllUsersProfiles } = require('../controllers/admin');\r\n\r\nconst router = express.Router();\r\n\r\n//getting all users of pesto-matrimony\r\nrouter.route('/getallusers').get(getAllUsersProfiles);\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\nconst { getMessages, sendMessage, markMessagesAsRead } = require('../controllers/conversations');\r\n\r\nconst router = express.Router();\r\n\r\n// '/' in this router is equivalent to  '/api/v1/conversations'\r\n\r\n// A message is an object in conversations array.\r\n// All of these controller functions are working on that conversations array.\r\nrouter.route('/').post(sendMessage).put(markMessagesAsRead);\r\n\r\nrouter.route('/:userId').get(getMessages);\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\nconst { acceptInterest, declineInterest, sendInterest } = require('../controllers/interests');\r\n\r\nconst router = express.Router();\r\n\r\n// '/' in this router is equivalent to  '/api/v1/interests'\r\n\r\nrouter.route('/').post(sendInterest);\r\n\r\nrouter.route('/accept').put(acceptInterest);\r\n\r\nrouter.route('/decline').put(declineInterest);\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { getRecommendations } = require('../controllers/recommendations');\r\n\r\n// '/' in this router is equivalent to  '/api/v1/recommendations'\r\n\r\nrouter.route('/').get(getRecommendations);\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { searchProfiles } = require('../controllers/search');\r\n\r\n// '/' in this router is equivalent to  '/api/v1/search'\r\n\r\nrouter.route('/').post(searchProfiles);\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { toggleShortlist } = require('../controllers/shortlist');\r\n\r\n// '/' in this router is equivalent to  '/api/v1/toggleShortlist'\r\n\r\nrouter.route('/').put(toggleShortlist);\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\n\r\n\r\nconst { getUserProfile, uploadImageToMongoDb, updateUserProfile, oktaSignUp, searchProfiles } = require('../controllers/users');\r\n\r\nconst router = express.Router();\r\n\r\n// '/' in this router is equivalent to  '/api/v1/users'\r\n\r\n// Signup\r\nrouter.route('/oktasignup').post(oktaSignUp);\r\nrouter.route('/userprofile/:id').get(getUserProfile);\r\nrouter.route('/imageupload/:id').post(uploadImageToMongoDb);\r\n\r\n//it was running for the admin\r\n// router.route('/getallusers').get(getAllUsersProfiles)\r\n\r\n// Update / Delete\r\nrouter.route('/:userId').get(getUserProfile).put(updateUserProfile);\r\n\r\n// Fetch User Profiles\r\nrouter.route('/search').get(searchProfiles);\r\n\r\n// Have to create another route & controller function for...\r\n// handling search and filters with pagination..\r\n// This route will have a lot of complex logic.\r\n\r\n// updateUserProfile will only be used to update Profile details...\r\n// NOT messages... although it is possible...\r\n// For message flow... a separate route (conversations) is present\r\n// Update\r\nrouter.route('/:userId').put(updateUserProfile);\r\n\r\nmodule.exports = router;\r\n","class CustomErrorResponse extends Error {\r\n  constructor(message, statusCode) {\r\n    super(message);\r\n    this.statusCode = statusCode;\r\n  }\r\n}\r\n\r\nmodule.exports = CustomErrorResponse;\r\n","module.exports = require(\"@okta/okta-sdk-nodejs\");","module.exports = require(\"body-parser\");","module.exports = require(\"cors\");","module.exports = require(\"express\");","module.exports = require(\"mongoose\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const cors = require('cors');\r\nconst express = require('express');\r\nconst dbConnection = require('./config/database');\r\nconst errorHandler = require('./middleware/error');\r\nconst bodyParser = require('body-parser');\r\n\r\n// Connect to MongoDB\r\ndbConnection();\r\n\r\n// Start Express Server\r\nconst app = express();\r\n\r\napp.use(cors());\r\n\r\napp.use(express.json());\r\n\r\n// parse application/x-www-form-urlencoded\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\n// parse application/json\r\napp.use(bodyParser.json());\r\n\r\n// importing routes\r\nconst conversations = require('./routes/conversations.js');\r\nconst admin = require('./routes/admin.js');\r\nconst interests = require('./routes/interests.js');\r\nconst recommendations = require('./routes/recommendations.js');\r\nconst search = require('./routes/search.js');\r\nconst toggleShortlist = require('./routes/shortlist.js');\r\nconst users = require('./routes/users.js');\r\n\r\n// mounting routes\r\napp.use('/api/v1/conversations', conversations);\r\napp.use('/api/v1/admin', admin);\r\napp.use('/api/v1/interests', interests);\r\napp.use('/api/v1/recommendations', recommendations);\r\napp.use('/api/v1/search', search);\r\napp.use('/api/v1/toggleShortlist', toggleShortlist);\r\napp.use('/api/v1/users', users);\r\n\r\n// error Handler\r\napp.use(errorHandler);\r\n\r\nconsole.log(process.env.PORT)\r\n\r\nconst server = app.listen(\r\n  process.env.PORT || 8000,\r\n  console.log(`Server is listening on port : ${process.env.PORT || 8000}\\nMode: ${process.env.NODE_ENV.toUpperCase()}`)\r\n);\r\n\r\n// Error in connecting to MongoDB triggers unhandledRejection at global level\r\n// That is being handled here. This stops server if MongoDB is NOT connected.\r\nprocess.on('unhandledRejection', (err, promise) => {\r\n  console.log(`Error: ${err.message}`);\r\n  server.close(() => process.exit(1));\r\n});\r\n"],"names":["mongoose","module","exports","console","log","connect","process","env","MONGO_URI","useNewUrlParser","useUnifiedTopology","asyncHandler","User","CustomErrorResponse","getAllUsersProfiles","req","res","next","allUsers","find","status","json","user","error","sendMessage","oktaUserId1","query","sender","oktaUserId2","receiver","message","_id","Types","ObjectId","body","messageSenderId","messageReceiverId","isRead","session","startSession","startTransaction","user1","oktaUserId","user2","didUser1SendInterestToUser2","interestsSent","some","interest","String","interestReceiverId","didUser1ReceiveInterestFromUser2","interestsReceived","interestSenderId","map","conversations","push","save","commitTransaction","endSession","success","abortTransaction","markMessagesAsRead","id","getMessages","params","sendInterest","name","interestSenderAge","age","interestSenderImage","images","interestSenderName","interestReceiverAge","interestReceiverImage","interestReceiverName","isAccepted","isRejected","acceptInterest","declineInterest","getRecommendations","currentUser","currentUserGender","gender","currentUserAge","currentUserReligion","religion","recommendations","$ne","exec","filter","profile","length","number","data","searchProfiles","searchCriteria","Object","keys","forEach","key","undefined","minAge","ageRange","maxAge","minHeight","heightRange","maxHeight","matchingProfiles","height","city","location","country","motherTongue","marriageStatus","state","toggleShortlist","shortlisterOktaId","shortlister","shortlisteeOktaId","shortlistee","wasAlreadyShortlisted","shortlistedMatches","oktaId","okta","registerUserProfile","create","findUserByOktaId","oktaSignUp","client","Client","orgUrl","token","createUserInOkta","response","createUser","mongoUser","firstName","lastName","email","createUserInMongoDB","send","err","getUserProfile","uploadImageToMongoDb","imageUrl","imageUrlString","currentUserId","imageUrls","updateOne","updateUserProfile","userId","$set","$gte","fn","Promise","resolve","catch","ErrorResponse","code","values","errors","val","join","statusCode","MessageSchema","Schema","type","trim","maxlength","Boolean","default","timeStamp","Date","now","UserSchema","required","unique","match","aboutMe","Number","weight","physique","citizenship","eatingHabits","smokingHabits","drinkingHabits","hobbies","spokenLanguages","employer","income","occupation","qualification","aboutFamily","brothers","familyStatus","marriedBrothers","marriedSisters","sisters","dateOfBirth","timeOfBirth","gothram","placeOfBirth","zodiacSign","partnerAgeRange","partnerCountry","partnerEatingHabits","partnerHeightRange","partnerIncomeRange","partnerMaritalStatus","partnerMotherTongue","partnerReligion","phone","createdAt","lastModifiedAt","role","enum","model","express","router","Router","route","get","post","put","Error","constructor","super","this","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","cors","dbConnection","errorHandler","bodyParser","app","use","urlencoded","extended","admin","interests","search","users","PORT","server","listen","toUpperCase","on","promise","close","exit"],"sourceRoot":""}