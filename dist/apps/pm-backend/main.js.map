{"version":3,"file":"main.js","mappings":"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","sources":["webpack://pm/./apps/pm-backend/src/config/database.js","webpack://pm/./apps/pm-backend/src/controllers/admin.js","webpack://pm/./apps/pm-backend/src/controllers/conversations.js","webpack://pm/./apps/pm-backend/src/controllers/interests.js","webpack://pm/./apps/pm-backend/src/controllers/recommendations.js","webpack://pm/./apps/pm-backend/src/controllers/search.js","webpack://pm/./apps/pm-backend/src/controllers/shortlist.js","webpack://pm/./apps/pm-backend/src/controllers/users.js","webpack://pm/./apps/pm-backend/src/middleware/async.js","webpack://pm/./apps/pm-backend/src/middleware/error.js","webpack://pm/./apps/pm-backend/src/models/Users.js","webpack://pm/./apps/pm-backend/src/routes/admin.js","webpack://pm/./apps/pm-backend/src/routes/conversations.js","webpack://pm/./apps/pm-backend/src/routes/interests.js","webpack://pm/./apps/pm-backend/src/routes/recommendations.js","webpack://pm/./apps/pm-backend/src/routes/search.js","webpack://pm/./apps/pm-backend/src/routes/shortlist.js","webpack://pm/./apps/pm-backend/src/routes/users.js","webpack://pm/./apps/pm-backend/src/utilities/errorResponse.js","webpack://pm/external commonjs \"@okta/okta-sdk-nodejs\"","webpack://pm/external commonjs \"@sentry/node\"","webpack://pm/external commonjs \"@sentry/tracing\"","webpack://pm/external commonjs \"body-parser\"","webpack://pm/external commonjs \"cors\"","webpack://pm/external commonjs \"express\"","webpack://pm/external commonjs \"mongoose\"","webpack://pm/external commonjs \"tslib\"","webpack://pm/webpack/bootstrap","webpack://pm/./apps/pm-backend/src/main.js"],"sourcesContent":["const mongoose = require('mongoose');\r\n\r\nconst dbConnection = async () => {\r\n  console.log('Connecting to mongoDB...');\r\n  const connection = await mongoose.connect(process.env.MONGO_URI, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n  });\r\n  console.log(`MongoDB connection successful !`);\r\n};\r\n\r\nmodule.exports = dbConnection;\r\n","const asyncHandler = require('../middleware/async');\r\nconst User = require('../models/Users');\r\nconst CustomErrorResponse = require('../utilities/errorResponse');\r\nconst okta = require('@okta/okta-sdk-nodejs');\r\n\r\n//getting all users profiles\r\nexports.getAllUsersProfiles = asyncHandler(async (req, res, next) => {\r\n  try {\r\n    const allUsers = await User.find();\r\n    res.status(200).json({ user: allUsers });\r\n  } catch (error) {\r\n    return next(new CustomErrorResponse('Error! Please try later', 500));\r\n  }\r\n});\r\n","const asyncHandler = require('../middleware/async');\r\nconst User = require('../models/Users');\r\nconst CustomErrorResponse = require('../utilities/errorResponse');\r\nconst mongoose = require('mongoose');\r\n\r\n// @desc   Send a New Message\r\n// @route  POST /api/v1/conversations?receiver=\"receiverID\"&sender=\"senderID\"\r\n// @access Private\r\n// In One go...the message sent MUST be in \"conversations\" array of both user1 and user2.\r\n// Otherwise, consider that attempt to send message as failure. So a MongoDB/Mongoose Transaction must be used.\r\nexports.sendMessage = asyncHandler(async (req, res, next) => {\r\n  const oktaUserId1 = req.query.sender;\r\n  const oktaUserId2 = req.query.receiver;\r\n  // I want the message object to have SAME _id in both users\r\n  // This will help me to enable read receipts\r\n\r\n  const message = {\r\n    message: req.body.message,\r\n    messageSenderId: oktaUserId1,\r\n    messageReceiverId: oktaUserId2,\r\n    isRead: false,\r\n  };\r\n\r\n  console.log(message);\r\n\r\n  const session = await User.startSession();\r\n\r\n  try {\r\n    session.startTransaction();\r\n\r\n    let user1 = await User.find({ oktaUserId: oktaUserId1 });\r\n    user1 = user1[0];\r\n    let user2 = await User.find({ oktaUserId: oktaUserId2 });\r\n    user2 = user2[0];\r\n\r\n    /**=============================================================== */\r\n    // User1 wants to send Message to User2\r\n\r\n    // NOTE: Messages are stored in an interest object's conversations property(array).\r\n\r\n    // STEP 1\r\n    // Determine if it is User1 who first sent the interest.\r\n    const didUser1SendInterestToUser2 = user1.interestsSent.some(\r\n      (interest) => String(interest.interestReceiverId) === oktaUserId2\r\n    );\r\n    // Determine if it is User1 who first received the interest.\r\n    const didUser1ReceiveInterestFromUser2 = user1.interestsReceived.some((interest) =>\r\n      String(interest.interestSenderId === oktaUserId2)\r\n    );\r\n    // If User1 is the first sender, then interest object will be in interestsSent Array\r\n    // If User1 is the first receiver, then interest object will be in interestsReceived Array\r\n    // Based on the location of interest object, update its conversations array...\r\n    if (didUser1SendInterestToUser2) {\r\n      // if user1 is the interest sender. So update interest object in interestsSent array of user 1\r\n      user1.interestsSent = user1.interestsSent.map((interest) => {\r\n        if (String(interest.interestReceiverId) === oktaUserId2) {\r\n          interest.conversations.push(message);\r\n        }\r\n        return interest;\r\n      });\r\n      // if user1 is the interest sender, then user2 is interest receiver.\r\n      // so interest object will be in user2's interestsReceived array\r\n      user2.interestsReceived = user2.interestsReceived.map((interest) => {\r\n        if (String(interest.interestSenderId) === oktaUserId1) {\r\n          interest.conversations.push(message);\r\n        }\r\n        return interest;\r\n      });\r\n    } else if (didUser1ReceiveInterestFromUser2) {\r\n      // user1 is interest receiver. Hence, update interest object in interestsReceived array of user1\r\n      user1.interestsReceived = user1.interestsReceived.map((interest) => {\r\n        if (String(interest.interestSenderId) === oktaUserId2) {\r\n          interest.conversations.push(message);\r\n        }\r\n        return interest;\r\n      });\r\n      // if user1 is the interest receiver.\r\n      // then user2 is the interest sender. So update interest object in interestsSent array of user2\r\n      user2.interestsSent = user2.interestsSent.map((interest) => {\r\n        if (String(interest.interestReceiverId) === oktaUserId1) {\r\n          interest.conversations.push(message);\r\n        }\r\n        return interest;\r\n      });\r\n    } else {\r\n      // If interest object is not present in both, then message cant be sent.\r\n      throw `Permission denied.`;\r\n    }\r\n    /**=============================================================== */\r\n    await user1.save();\r\n    await user2.save();\r\n\r\n    await session.commitTransaction();\r\n    session.endSession();\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Message sent !',\r\n    });\r\n  } catch (error) {\r\n    // If an error occurred, abort the whole transaction and\r\n    // undo any changes that might have happened\r\n    // console.log(error);\r\n    await session.abortTransaction();\r\n    session.endSession();\r\n    return next(new CustomErrorResponse('Message not sent! Please try later', 500));\r\n  }\r\n});\r\n\r\n// @desc   Mark all messages between two users as \"Read\"\r\n// @route  PUT /api/v1/conversations?user1=\"oktaUserId1\"&user2=\"oktaUserId2\"\r\n// @access Private\r\nexports.markMessagesAsRead = asyncHandler(async (req, res, next) => {\r\n  const oktaUserId1 = req.query.user1;\r\n  const oktaUserId2 = req.query.user2;\r\n\r\n  const session = await User.startSession();\r\n  try {\r\n    session.startTransaction();\r\n\r\n    let user1 = await User.find({ oktaUserId: oktaUserId1 });\r\n    user1 = user1[0];\r\n    let user2 = await User.find({ oktaUserId: oktaUserId2 });\r\n    user2 = user2[0];\r\n\r\n    // STEP 1\r\n    // Determine if it is User1 who first sent the interest.\r\n    const didUser1SendInterestToUser2 = user1.interestsSent.some(\r\n      (interest) => String(interest.interestReceiverId) === oktaUserId2\r\n    );\r\n    // Determine if it is User1 who first received the interest.\r\n    const didUser1ReceiveInterestFromUser2 = user1.interestsReceived.some((interest) =>\r\n      String(interest.interestSenderId === oktaUserId2)\r\n    );\r\n\r\n    if (didUser1SendInterestToUser2) {\r\n      // if User1 sent interest to User2, then...\r\n      // 1. Identify the interest object specific to user2 in interestsSent array of user1\r\n      // 2. Then update the conversations array of that object, mark all messages as read.\r\n      // 3. Also, find the interest object specific to user 1 in interestsReceived array of user2\r\n      // 4. Update conversations array of that object by marking all messages as read.\r\n      user1.interestsSent = user1.interestsSent.map((interest) => {\r\n        if (String(interest.interestReceiverId) === user2.oktaUserId) {\r\n          // marking all unread messages as read.\r\n          interest.conversations = interest.conversations.map((message) => {\r\n            if (!message.isRead) {\r\n              message.isRead = true;\r\n            }\r\n            return message;\r\n          });\r\n        }\r\n        return interest;\r\n      });\r\n\r\n      user2.interestsReceived = user2.interestsReceived.map((interest) => {\r\n        if (String(interest.interestSenderId) === user1.oktaUserId) {\r\n          // marking all messages as read.\r\n          interest.conversations = interest.conversations.map((message) => {\r\n            if (!message.isRead) {\r\n              message.isRead = true;\r\n            }\r\n            return message;\r\n          });\r\n        }\r\n        return interest;\r\n      });\r\n    } else if (didUser1ReceiveInterestFromUser2) {\r\n      // if User1 sent received interest from User2, then...\r\n      // 1. Identify the interest object specific to user2 in interestsReceived array of user1\r\n      // 2. Then update the conversations array of that object, mark all messages as read.\r\n      // 3. Also, find the interest object specific to user 1 in interestsSent array of user2\r\n      // 4. Update conversations array of that object by marking all messages as read.\r\n      user1.interestsReceived = user1.interestsReceived.map((interest) => {\r\n        if (String(interest.interestSenderId) === user2.oktaUserId) {\r\n          // marking all messages as read.\r\n          interest.conversations = interest.conversations.map((message) => {\r\n            if (!message.isRead) {\r\n              message.isRead = true;\r\n            }\r\n            return message;\r\n          });\r\n        }\r\n        return interest;\r\n      });\r\n\r\n      user2.interestsSent = user2.interestsSent.map((interest) => {\r\n        if (String(interest.interestReceiverId) === user1.oktaUserId) {\r\n          interest.conversations = interest.conversations.map((message) => {\r\n            // marking all messages as read.\r\n            if (!message.isRead) {\r\n              message.isRead = true;\r\n            }\r\n            return message;\r\n          });\r\n        }\r\n        return interest;\r\n      });\r\n    } else {\r\n      throw 'Permission denied.';\r\n    }\r\n\r\n    await user1.save();\r\n    await user2.save();\r\n  } catch (error) {\r\n    // If an error occurred, abort the whole transaction and\r\n    // undo any changes that might have happened\r\n    // console.log(error);\r\n    await session.abortTransaction();\r\n    session.endSession();\r\n    return next(new CustomErrorResponse('Error! Please try later', 500));\r\n  }\r\n\r\n  res.status(200).json({\r\n    success: true,\r\n    message: 'Messages marked as read !',\r\n  });\r\n});\r\n\r\n// @desc   Get all messages between two users as \"Read\"\r\n// @route  GET /api/v1/conversations/:oktaUserId\r\n// @access Private\r\n\r\nexports.getMessages = asyncHandler(async (req, res, next) => {\r\n  try {\r\n    let user = await User.find({ oktaUserId: req.params.oktaUserId });\r\n    user = user[0];\r\n\r\n    console.log(user);\r\n    if (!user) {\r\n      return next(new CustomErrorResponse(`User not found!`, 404));\r\n    }\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Data Retrieved Successfull !',\r\n      interestsReceived: [...user.interestsReceived],\r\n      interestsSent: [...user.interestsSent],\r\n    });\r\n  } catch (error) {\r\n    return next(new CustomErrorResponse(`Error! Please try later`, 500));\r\n  }\r\n});\r\n","const asyncHandler = require('../middleware/async');\r\nconst User = require('../models/Users');\r\nconst CustomErrorResponse = require('../utilities/errorResponse');\r\nconst mongoose = require('mongoose');\r\n\r\n// @desc   Send a New Interest\r\n// @route  POST /api/v1/interests?sender=oktaUserId1&receiver=oktaUserId2\r\n// @access Private\r\n\r\n// In One go...the interest sent MUST be in \"interestsSent\" array of Sender and \"interestsReceived\" array of Receiver.\r\n// Otherwise, consider that attempt to send interest as failure. So a MongoDB/Mongoose Transaction must be used.\r\n\r\nexports.sendInterest = asyncHandler(async (req, res, next) => {\r\n  const oktaUserId1 = req.query.sender;\r\n  const oktaUserId2 = req.query.receiver;\r\n  const session = await User.startSession();\r\n\r\n  console.log('oktaUserId1 ', oktaUserId1);\r\n  console.log('oktaUserId2 ', oktaUserId2);\r\n  try {\r\n    session.startTransaction();\r\n\r\n    let user1 = await User.find({ oktaUserId: oktaUserId1 });\r\n    user1 = user1[0];\r\n    let user2 = await User.find({ oktaUserId: oktaUserId2 });\r\n    user2 = user2[0];\r\n\r\n    /**=============================================================== */\r\n    // User1 wants to send Interest to User2\r\n\r\n    // NOTE: Interests are stored as objects in interestsSender array of Sender(User1)\r\n    // & also in interestsReceived array of Receiver(User2).\r\n\r\n    // Step 1: Determine if User1 already send or received interest to/from User 2 ?\r\n    // If Yes, then throw error that You've already sent/received interest to User 2\r\n\r\n    // Checking interestsSent and interestsReceived array of User1\r\n    const didUser1AlreadySendInterestToUser2 = user1.interestsSent.some(\r\n      (interest) => interest.interestReceiverId === oktaUserId2\r\n    );\r\n\r\n    console.log('didUser1AlreadySendInterestToUser2', didUser1AlreadySendInterestToUser2);\r\n    if (didUser1AlreadySendInterestToUser2) {\r\n      await session.abortTransaction();\r\n      session.endSession();\r\n      return next(\r\n        new CustomErrorResponse(\r\n          `Interest already sent to ${user2.name}. Please wait for response. If your interest was accepted before, this profile is already in \"Accepted\" list. Please check.`,\r\n          400\r\n        )\r\n      );\r\n    }\r\n\r\n    const didUser1AlreadyReceiveInterestFromUser2 = user1.interestsReceived.some(\r\n      (interest) => interest.interestSenderId === oktaUserId2\r\n    );\r\n\r\n    console.log('didUser1AlreadyReceiveInterestFromUser2', didUser1AlreadyReceiveInterestFromUser2);\r\n    if (didUser1AlreadyReceiveInterestFromUser2) {\r\n      await session.abortTransaction();\r\n      session.endSession();\r\n      return next(\r\n        new CustomErrorResponse(\r\n          `Interest already received from ${user2.name}. Please respond to it. If you've already accepted her interest, please check \"Accepted\" list.`,\r\n          400\r\n        )\r\n      );\r\n    }\r\n\r\n    const maleImagePlaceholder = `https://res.cloudinary.com/pesto-matrimony/image/upload/v1662374871/e0kfqgvenrb2mhpzya4a.png`;\r\n    const femaleImagePlaceholder = `https://res.cloudinary.com/pesto-matrimony/image/upload/v1662458482/tufqrbcs4pnkwcukvynw.png`;\r\n\r\n    // If Not sent Interest before, then...\r\n    // put the interest object in interestsSent array of User1\r\n    user1.interestsSent.push({\r\n      conversations: [],\r\n      interestSenderAge: user1.age,\r\n      interestSenderId: user1.oktaUserId,\r\n      interestSenderImage: user1.images[0] || user1.gender === 'male' ? maleImagePlaceholder : femaleImagePlaceholder,\r\n      interestSenderName: user1.name,\r\n      interestReceiverAge: user2.age,\r\n      interestReceiverId: user2.oktaUserId,\r\n      interestReceiverImage: user2.images[0] || user2.gender === 'male' ? maleImagePlaceholder : femaleImagePlaceholder,\r\n      interestReceiverName: user2.name,\r\n      isAccepted: false,\r\n      isRejected: false,\r\n    });\r\n\r\n    // Also...\r\n    // Put the same interest object in interestsReceived array of User2\r\n    user2.interestsReceived.push({\r\n      conversations: [],\r\n      interestSenderAge: user1.age,\r\n      interestSenderId: user1.oktaUserId,\r\n      interestSenderImage: user1.images[0] || user1.gender === 'male' ? maleImagePlaceholder : femaleImagePlaceholder,\r\n      interestSenderName: user1.name,\r\n      interestReceiverAge: user2.age,\r\n      interestReceiverId: user2.oktaUserId,\r\n      interestReceiverImage: user2.images[0] || user2.gender === 'male' ? maleImagePlaceholder : femaleImagePlaceholder,\r\n      interestReceiverName: user2.name,\r\n      isAccepted: false,\r\n      isRejected: false,\r\n    });\r\n\r\n    /**=============================================================== */\r\n    await user1.save();\r\n    await user2.save();\r\n\r\n    await session.commitTransaction();\r\n    session.endSession();\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Interest sent!',\r\n    });\r\n  } catch (error) {\r\n    // If an error occurred, abort the whole transaction and\r\n    // undo any changes that might have happened\r\n    // console.log(error);\r\n    await session.abortTransaction();\r\n    session.endSession();\r\n    return next(new CustomErrorResponse('Interest not sent. Please try later!', 500));\r\n  }\r\n});\r\n\r\n// @desc   Accept an Interest\r\n// @route  PUT /api/v1/interests/accept?sender=oktaUserId1&receiver=oktaUserId2\r\n// @access Private\r\n\r\n// In One go... isAccepted property in interest object must be updated to \"true\" for\r\n// both sender and receiver.\r\n// User1 is interest Sender. Interest object will be in interestsSent array of User 1\r\n// User2 is interest Receiver. Interest object will be in interestsReceived array of User 2\r\n// User2 can accept interest. Because User2 \"received\" the interest.\r\n// When he does that... update isAccepted to \"true\" for both\r\nexports.acceptInterest = asyncHandler(async (req, res, next) => {\r\n  const oktaUserId1 = req.query.sender;\r\n  const oktaUserId2 = req.query.receiver;\r\n  const session = await User.startSession();\r\n\r\n  try {\r\n    session.startTransaction();\r\n\r\n    let user1 = await User.find({ oktaUserId: oktaUserId1 });\r\n    user1 = user1[0];\r\n    let user2 = await User.find({ oktaUserId: oktaUserId2 });\r\n    user2 = user2[0];\r\n    /**=============================================================== */\r\n\r\n    user2.interestsReceived = user2.interestsReceived.map((interest) => {\r\n      // First identify the interest object which must be updated.\r\n      if (String(interest.interestSenderId) === user1.oktaUserId) {\r\n        interest.isAccepted = true;\r\n      }\r\n      return interest;\r\n    });\r\n\r\n    // Also...\r\n    // Put update same interest object in interestsSent array of User1\r\n\r\n    user1.interestsSent = user1.interestsSent.map((interest) => {\r\n      // First identify the interest object to be updated.\r\n      if (String(interest.interestReceiverId) === user2.oktaUserId) {\r\n        interest.isAccepted = true;\r\n      }\r\n      return interest;\r\n    });\r\n\r\n    /**=============================================================== */\r\n    await user1.save();\r\n    await user2.save();\r\n\r\n    await session.commitTransaction();\r\n    session.endSession();\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Interest accepted!',\r\n    });\r\n  } catch (error) {\r\n    // If an error occurred, abort the whole transaction and\r\n    // undo any changes that might have happened\r\n    // console.log(error);\r\n    await session.abortTransaction();\r\n    session.endSession();\r\n    return next(new CustomErrorResponse('Error accepting interest. Please try later!', 500));\r\n  }\r\n});\r\n\r\n// @desc   Decline an Interest\r\n// @route  PUT /api/v1/interests/decline?sender=oktaUserId1&receiver=oktaUserId2\r\n// @access Private\r\n\r\n// Receiver of an interest can decline an interest.\r\n// User 1 is sender & User 2 is receiver.\r\n// So, update isRejected to \"true\" in interest object in interestsReceived array of User2\r\n// Also, update isRejected to \"true\" in interest object in interestsSent array of User1\r\nexports.declineInterest = asyncHandler(async (req, res, next) => {\r\n  const oktaUserId1 = req.query.sender;\r\n  const oktaUserId2 = req.query.receiver;\r\n  const session = await User.startSession();\r\n\r\n  try {\r\n    session.startTransaction();\r\n\r\n    let user1 = await User.find({ oktaUserId: oktaUserId1 });\r\n    user1 = user1[0];\r\n    let user2 = await User.find({ oktaUserId: oktaUserId2 });\r\n    user2 = user2[0];\r\n    /**=============================================================== */\r\n\r\n    user2.interestsReceived = user2.interestsReceived.map((interest) => {\r\n      // First identify the interest object which must be updated.\r\n      if (String(interest.interestSenderId) === user1.oktaUserId) {\r\n        interest.isRejected = true;\r\n      }\r\n      return interest;\r\n    });\r\n\r\n    // Also...\r\n    // Put update same interest object in interestsSent array of User1\r\n\r\n    user1.interestsSent = user1.interestsSent.map((interest) => {\r\n      // First identify the interest object to be updated.\r\n      if (String(interest.interestReceiverId) === user2.oktaUserId) {\r\n        interest.isRejected = true;\r\n      }\r\n      return interest;\r\n    });\r\n\r\n    /**=============================================================== */\r\n    await user1.save();\r\n    await user2.save();\r\n\r\n    await session.commitTransaction();\r\n    session.endSession();\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Interest rejected!',\r\n    });\r\n  } catch (error) {\r\n    // If an error occurred, abort the whole transaction and\r\n    // undo any changes that might have happened\r\n    // console.log(error);\r\n    await session.abortTransaction();\r\n    session.endSession();\r\n    return next(new CustomErrorResponse('Error rejecting interest. Please try later!', 500));\r\n  }\r\n});\r\n\r\n// @desc   Cancel an Interest\r\n// @route  PUT /api/v1/interests/cancel?sender=oktaUserId1&receiver=oktaUserId2\r\n// @access Private\r\nexports.cancelInterest = asyncHandler(async (req, res, next) => {\r\n  const oktaUserId1 = req.query.sender;\r\n  const oktaUserId2 = req.query.receiver;\r\n  const session = await User.startSession();\r\n\r\n  try {\r\n    session.startTransaction();\r\n\r\n    let user1 = await User.find({ oktaUserId: oktaUserId1 });\r\n    user1 = user1[0];\r\n    let user2 = await User.find({ oktaUserId: oktaUserId2 });\r\n    user2 = user2[0];\r\n\r\n    /**=============================================================== */\r\n\r\n    // Remove sent interest from user1's interestsSent array and\r\n    // Remove received interest from user2's interestsReceived array\r\n\r\n    // Only an unaccepted interest can be cancelled.\r\n    user1.interestsSent = user1.interestsSent.filter((interest) => {\r\n      if (interest.isAccepted === false && interest.interestReceiverId === oktaUserId2) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n\r\n    user2.interestsReceived = user2.interestsReceived.filter((interest) => {\r\n      if (interest.isAccepted === false && interest.interestSenderId === oktaUserId1) {\r\n        return false;\r\n      }\r\n      return true;\r\n    });\r\n\r\n    /**=============================================================== */\r\n\r\n    await user1.save();\r\n    await user2.save();\r\n\r\n    await session.commitTransaction();\r\n    session.endSession();\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Interest Cancelled!',\r\n    });\r\n  } catch (error) {\r\n    // If an error occurred, abort the whole transaction and\r\n    // undo any changes that might have happened\r\n    // console.log(error);\r\n    await session.abortTransaction();\r\n    session.endSession();\r\n    return next(new CustomErrorResponse('Could not cancel interest. Please try later!', 500));\r\n  }\r\n});\r\n","const asyncHandler = require('../middleware/async');\r\nconst User = require('../models/Users');\r\nconst CustomErrorResponse = require('../utilities/errorResponse');\r\n\r\n// @desc   Get Recommendations\r\n// @route  GET /api/v1/recommendations/:oktaUserId\r\n// @access Private\r\nexports.getRecommendations = asyncHandler(async (req, res, next) => {\r\n  try {\r\n    const currentUser = await User.find({ oktaUserId: req.params.oktaUserId });\r\n\r\n    if (!currentUser) {\r\n      return next(new CustomErrorResponse(`User not found!`, 404));\r\n    }\r\n\r\n    const currentUserGender = currentUser[0].gender;\r\n    const currentUserAge = currentUser[0].age;\r\n    const currentUserReligion = currentUser[0].religion;\r\n\r\n    const profiles = await User.find({ gender: { $ne: currentUserGender } }).exec();\r\n\r\n    //Recommendations based on gender, age and religion\r\n    const recommendations = profiles.filter((profile) => {\r\n      return (\r\n        (currentUserGender === 'male' ? profile.age <= currentUserAge : profile.age >= currentUserAge) &&\r\n        (currentUserReligion ? profile.religion === currentUserReligion : true)\r\n      );\r\n    });\r\n\r\n    console.log('No. of Recommendations: ', recommendations.length);\r\n\r\n    if (recommendations.length < 1) {\r\n      res.status(200).json({\r\n        success: false,\r\n        message: 'Recommendations not found. Please update your age and religion to get recommendations.',\r\n        number: recommendations.length,\r\n        data: recommendations,\r\n      });\r\n      return;\r\n    }\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Recommendations found.',\r\n      number: recommendations.length,\r\n      data: recommendations,\r\n    });\r\n  } catch (error) {\r\n    return next(new CustomErrorResponse('Error!. Please try later!', 500));\r\n  }\r\n});\r\n","const asyncHandler = require('../middleware/async');\r\nconst User = require('../models/Users');\r\nconst CustomErrorResponse = require('../utilities/errorResponse');\r\n\r\nconst MINIMUM_HEIGHT_IN_CMS = 122;\r\nconst MAXIMUM_HEIGHT_IN_CMS = 214;\r\nconst MINIMUM_ALLOWED_AGE = 21;\r\nconst MAXIMUM_ALLOWED_AGE = 50;\r\n\r\n// @desc   Search Profiles\r\n// @route  POST /api/v1/users/search/:oktaUserId\r\n// @access Private\r\n\r\nexports.searchProfiles = asyncHandler(async (req, res, next) => {\r\n  try {\r\n    console.log('search route has been hit...');\r\n    const currentUser = await User.find({ oktaUserId: req.params.oktaUserId });\r\n    console.log(req.body);\r\n    if (!currentUser) {\r\n      return next(new CustomErrorResponse(`User not found!`, 404));\r\n    }\r\n\r\n    const currentUserGender = currentUser[0].gender;\r\n\r\n    const searchCriteria = req.body;\r\n    console.log(searchCriteria);\r\n    // Remove properties with 'undefined' & \"null\" values before perfmorming search in DB\r\n    Object.keys(searchCriteria).forEach((key) => {\r\n      if (searchCriteria[key] === undefined || searchCriteria[key] === null) {\r\n        delete searchCriteria[key];\r\n      }\r\n    });\r\n\r\n    const { ageRange, city, country, heightRange, religion, marriageStatus, motherTongue, state } = searchCriteria;\r\n\r\n    const minAge = ageRange === undefined ? MINIMUM_ALLOWED_AGE : ageRange[0];\r\n    const maxAge = ageRange === undefined ? MAXIMUM_ALLOWED_AGE : ageRange[1];\r\n    const minHeight = heightRange === undefined ? MINIMUM_HEIGHT_IN_CMS : heightRange[0];\r\n    const maxHeight = heightRange === undefined ? MAXIMUM_HEIGHT_IN_CMS : heightRange[1];\r\n\r\n    // get profiles of opposite gender.\r\n    const profiles = await User.find({ gender: { $ne: currentUserGender } }).exec();\r\n\r\n    // filter opposite gender profiles as per search preferences.\r\n    const matchingProfiles = profiles.filter((profile) => {\r\n      return (\r\n        profile.age >= minAge &&\r\n        profile.age <= maxAge &&\r\n        profile.height >= minHeight &&\r\n        profile.height <= maxHeight &&\r\n        (city ? profile.location === city : true) &&\r\n        (country ? profile.country === country : true) &&\r\n        (motherTongue ? profile.motherTongue === motherTongue : true) &&\r\n        (marriageStatus ? profile.marriageStatus === marriageStatus : true) &&\r\n        (religion ? profile.religion === religion : true) &&\r\n        (state ? profile.state === state : true)\r\n      );\r\n    });\r\n\r\n    console.log('No. of Matches: ', matchingProfiles.length);\r\n\r\n    if (matchingProfiles.length < 1) {\r\n      res.status(200).json({\r\n        success: false,\r\n        message: 'Matches not found. Please adjust your search criteria',\r\n        number: matchingProfiles.length,\r\n        data: matchingProfiles,\r\n      });\r\n      return;\r\n    }\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message: 'Matches found.',\r\n      number: matchingProfiles.length,\r\n      data: matchingProfiles,\r\n    });\r\n  } catch (error) {\r\n    return next(new CustomErrorResponse('Error!. Please try later!', 500));\r\n  }\r\n});\r\n","const asyncHandler = require('../middleware/async');\r\nconst User = require('../models/Users');\r\nconst CustomErrorResponse = require('../utilities/errorResponse');\r\nconst okta = require('@okta/okta-sdk-nodejs');\r\n\r\n// @desc   Shortlist Profiles\r\n// @route  PUT /api/v1/toggleShortlist?shortlister=oktaUserId1&shorlistee=oktaUserId2\r\n// @access Private\r\nexports.toggleShortlist = asyncHandler(async (req, res, next) => {\r\n  const shortlisterOktaId = req.query.shortlister;\r\n  const shortlisteeOktaId = req.query.shortlistee;\r\n  console.log(shortlisterOktaId);\r\n  console.log(shortlisteeOktaId);\r\n\r\n  try {\r\n    // user who wants to shortlist\r\n    let shortlister = await User.find({ oktaUserId: shortlisterOktaId });\r\n    shortlister = shortlister[0];\r\n\r\n    const { shortlistedMatches } = shortlister;\r\n\r\n    // user who is being shortlisted\r\n    let shortlistee = await User.find({ oktaUserId: shortlisteeOktaId });\r\n    shortlistee = shortlistee[0];\r\n\r\n    // Did shortlister already shortlist shortlistee ?\r\n    const wasAlreadyShortlisted = shortlister.shortlistedMatches.some((oktaId) => oktaId === shortlisteeOktaId);\r\n    // console.log(wasAlreadyShortlisted);\r\n\r\n    if (wasAlreadyShortlisted) {\r\n      // If Yes... then remove from shortlist\r\n      shortlister.shortlistedMatches = shortlister.shortlistedMatches.filter((oktaId) => oktaId !== shortlisteeOktaId);\r\n    } else {\r\n      // If No, then shortlist\r\n      shortlister.shortlistedMatches = [...shortlistedMatches, shortlisteeOktaId];\r\n    }\r\n\r\n    await shortlister.save();\r\n\r\n    const message = wasAlreadyShortlisted\r\n      ? `${shortlistee.name} has been removed from your shortlist`\r\n      : `${shortlistee.name} was added to your shortlisted profiles`;\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      message,\r\n    });\r\n  } catch (error) {\r\n    return next(new CustomErrorResponse('Please try later', 500));\r\n  }\r\n});\r\n","const asyncHandler = require('../middleware/async');\r\nconst User = require('../models/Users');\r\nconst CustomErrorResponse = require('../utilities/errorResponse');\r\nconst okta = require('@okta/okta-sdk-nodejs');\r\n\r\n// @desc   Register a new Profile\r\n// @route  POST /api/v1/users/\r\n// @access Public\r\n\r\n/** ----------------------------------------- */\r\n\r\n\r\n//signing up user into okta\r\nexports.oktaSignUp = asyncHandler(async (req, res, next) => {\r\n  const client = new okta.Client({\r\n    orgUrl: 'https://dev-42684472.okta.com/',\r\n    token: '00TW3soK2Eq883PaRVu5rjqRniqE6iaueZOivSe91P',\r\n  });\r\n  const body = req.body;\r\n  \r\n    // async function createUserInOkta() {\r\n      const response = await client.createUser(body);\r\n\r\n      //will update it with destructure\r\n      const oktaId = response.id;\r\n      const name = `${response.profile.firstName} ${response.profile.lastName}`;\r\n      const gender = response.profile.gender;\r\n      const email = response.profile.email;\r\n\r\n      const mongoUser = {\r\n        oktaUserId: oktaId,\r\n        name,\r\n        gender,\r\n        email,\r\n      };\r\n\r\n      //creting user in mongo db with data from the okta\r\n      const user = await User.create(mongoUser);\r\n\r\n    res.status(200).send({\r\n      res: user,\r\n    });\r\n});\r\n\r\n//find user in mongodb by oktaId\r\nasync function findUserByOktaId(oktaId) {\r\n  const currentUser = await User.find({ oktaUserId: oktaId })\r\n  return currentUser;\r\n}\r\n\r\n//getting userPrifileData\r\nexports.getUserProfile = asyncHandler(async (req, res, next) => {\r\n  const params = req.params;\r\n  const oktaId = params.id;\r\n  const currentUser = await findUserByOktaId(oktaId);\r\n  // const currentUser = await User.find({ oktaUserId: oktaId });\r\n  if (!currentUser) {\r\n    return next(new CustomErrorResponse(`User not found!`, 404));\r\n  }\r\n  res.status(200).json({ currentUser });\r\n});\r\n\r\n//to upload image in mongodb\r\nexports.uploadImageToMongoDb = asyncHandler(async (req, res, next) => {\r\n  const imageUrl = req.body.imageUrlString;\r\n  const currentUserId = req.body.oktaUserId;\r\n  const currentUser = await findUserByOktaId(currentUserId);\r\n  // console.log(currentUser[0].images);\r\n  const imageUrls = currentUser[0].images;\r\n\r\n  if (!currentUser) {\r\n    return next(new CustomErrorResponse(`User not found!`, 404));\r\n  }\r\n  await User.updateOne({ oktaUserId: currentUserId }, { images: [...imageUrls, imageUrl] });\r\n\r\n  res.status(200).json({ status: 'success' });\r\n});\r\n\r\n/** ----------------------------------------- */\r\nexports.updateUserProfile = asyncHandler(async (req, res, next) => {\r\n  const currentUserId = req.params.userId;\r\n\r\n  //getting mongodbId using oktaUserId\r\n  // const user = await findUserByOktaId(currentUserId);\r\n  // const mongoId = user[0]._id.toString()\r\n  // console.log(mongoId);\r\n\r\n  const body = req.body;\r\n\r\n  if(!body){\r\n    return next(new CustomErrorResponse(`req.body is empty`, 400));\r\n  }\r\n\r\n  if (!currentUserId) {\r\n    return next(new CustomErrorResponse(`Can't update data of non-existent user`, 400));\r\n  }\r\n  await User.updateOne({ oktaUserId: currentUserId }, { $set: body });\r\n  res.status(200).json({\r\n    success: true,\r\n    message: 'Updated User successfully',\r\n    data: 'user',\r\n  });\r\n});\r\n\r\n/** ----------------------------------------- */\r\n\r\n// @desc   Search Profiles\r\n// @route  GET /api/v1/users/search/\r\n// @access Private\r\n\r\nexports.searchProfiles = asyncHandler(async (req, res, next) => {\r\n  const searchCriteria = req.body;\r\n\r\n  // NOTE : WORK IN PROGRESS....\r\n\r\n  // Remove properties with 'undefined' values before perfmorming search in DB\r\n  Object.keys(searchCriteria).forEach((key) => {\r\n    if (searchCriteria[key] === undefined) {\r\n      delete searchCriteria[key];\r\n    }\r\n  });\r\n\r\n  let matchingProfiles = await User.find({ name: 'john', age: { $gte: 18 } }).exec();\r\n\r\n  // console.log(matchingProfiles);\r\n\r\n  if (matchingProfiles.length < 1) {\r\n    return next(new CustomErrorResponse(`Could not find matching profiles`, 400));\r\n  }\r\n\r\n  res.status(200).json({\r\n    success: true,\r\n    message: 'Updated User successfully',\r\n    data: matchingProfiles,\r\n  });\r\n});\r\n\r\nexports.deleteImage = asyncHandler(async (req, res, next) => {\r\n\r\n  const currentUserOktaId = req.params.userId;\r\n  const imageArrayIndex = req.params.index;\r\n\r\n  //geting currentUserData by OktaUserId\r\n  const currentUserProfile = await findUserByOktaId(currentUserOktaId);\r\n\r\n  //image deleting logic\r\n  currentUserProfile[0].images.splice(imageArrayIndex, 1);\r\n\r\n  await User.updateOne({ oktaUserId: currentUserOktaId }, { images: currentUserProfile[0].images });\r\n\r\n  res.status(200).json({\r\n    success: true,\r\n    message: 'Deleted user successfully',\r\n    data: 'user'\r\n  });\r\n  \r\n    res.status(400).json({\r\n      success: false,\r\n      message: 'Image is not deleted',\r\n      error: err\r\n    });\r\n  \r\n  // //geting currentUserData by OktaUserId\r\n  // const currentUserProfile = await findUserByOktaId(currentUserOktaId);\r\n\r\n  // //image deleting logic\r\n  // currentUserProfile[0].images.splice(imageArrayIndex, 1);\r\n\r\n  // await User.updateOne({ oktaUserId: currentUserOktaId }, { images: currentUserProfile[0].images });\r\n\r\n  // res.status(200).json({\r\n  //   success: true,\r\n  //   message: 'Deleted user successfully',\r\n  //   data: 'user'\r\n  // });\r\n\r\n})\r\n","const asyncHandler = fn => (req, res, next) => {\r\n  Promise.resolve(fn(req, res, next)).catch(next);\r\n};\r\n\r\nmodule.exports = asyncHandler;\r\n\r\n\r\n\r\n// This asyncHanlder() will wrap around all controller methods which do DB operations...\r\n// If there is an error in DB Operation, asyncHandler() catches that error...\r\n// Then passes it to errorHandler() middleware...\r\n// Then the errorHandler middleware gives JSON as response.\r\n","// All Errors in this Express Application come here...\r\n// as errorHandler() is middleware function...\r\n// This helps send a customized response after identifying the error.\r\nconst ErrorResponse = require('../utilities/errorResponse');\r\nconst errorHandler = (err, req, res, next) => {\r\n  let error = { ...err };\r\n  error.message = err.message;\r\n\r\n  console.log(error);\r\n\r\n  // Duplicate Phone/Email Used while Registration\r\n  if (err.code === 11000) {\r\n    const message = `Email / Phone already used for registration.`;\r\n    error = new ErrorResponse(message, 400); // 400 = bad request\r\n  }\r\n\r\n  if (err.code === 'E0000001') {\r\n    const message = `password: This password was found in a list of commonly used passwords. Please try another password.`;\r\n    error = new ErrorResponse(message, 400); // 400 = bad request\r\n  }\r\n\r\n  // Mongoose validation error\r\n  if (err.name === 'ValidationError') {\r\n    const message = Object.values(err.errors).map((val) => val.message);\r\n    console.log(message);\r\n    error = new ErrorResponse(message.join(' & '), 400);\r\n  }\r\n\r\n  res.json({\r\n    success: false,\r\n    error: error.message || 'Server Error',\r\n  });\r\n};\r\n\r\nmodule.exports = errorHandler;\r\n","const mongoose = require('mongoose');\r\n\r\nconst MessageSchema = new mongoose.Schema({\r\n  messageSenderId: {\r\n    type: String,\r\n    trim: true,\r\n  },\r\n  messageReceiverId: {\r\n    type: String,\r\n    trim: true,\r\n  },\r\n  message: {\r\n    type: String,\r\n    trim: true,\r\n    maxlength: [500, 'Message can not be more than 500 characters'],\r\n  },\r\n  isRead: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  timeStamp: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n});\r\n\r\nconst UserSchema = new mongoose.Schema({\r\n  name: {\r\n    type: String,\r\n    trim: true,\r\n    required: [true, 'Name is missing!'],\r\n    maxlength: [50, 'Name can not be more than 50 characters'],\r\n  },\r\n  gender: {\r\n    type: String,\r\n    required: [true, 'Gender is missing!'],\r\n    trim: true,\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: [true, 'Email is missing!'],\r\n    unique: true,\r\n    match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/, 'Please add a valid email'],\r\n  },\r\n  oktaUserId: {\r\n    type: String,\r\n    unique: true,\r\n    required: [true, 'Okta User Id is missing !'],\r\n  },\r\n  images: {\r\n    type: [String],\r\n    default: [],\r\n  },\r\n\r\n  // Personal Information\r\n\r\n  aboutMe: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  age: {\r\n    type: Number,\r\n    trim: true,\r\n    default: 21,\r\n  },\r\n  height: {\r\n    type: Number,\r\n    trim: true,\r\n    default: 140,\r\n  },\r\n  weight: {\r\n    type: Number,\r\n    trim: true,\r\n  },\r\n  physique: {\r\n    type: String,\r\n    default: '',\r\n    trim: true,\r\n  },\r\n  motherTongue: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  marriageStatus: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  citizenship: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  country: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  state: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  location: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  eatingHabits: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  smokingHabits: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  drinkingHabits: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  hobbies: {\r\n    type: [String],\r\n    default: [],\r\n  },\r\n  spokenLanguages: {\r\n    type: [String],\r\n    default: [],\r\n  },\r\n\r\n  // Education & Occupation Details\r\n\r\n  employer: {\r\n    type: String,\r\n    default: '',\r\n  },\r\n  income: {\r\n    type: Number,\r\n  },\r\n  occupation: {\r\n    type: String,\r\n    default: '',\r\n  },\r\n  qualification: {\r\n    type: String,\r\n    default: '',\r\n  },\r\n\r\n  // Family Details\r\n\r\n  aboutFamily: {\r\n    type: String,\r\n    default: '',\r\n  },\r\n  brothers: {\r\n    type: Number,\r\n  },\r\n  familyStatus: {\r\n    type: String,\r\n    default: '',\r\n  },\r\n  marriedBrothers: {\r\n    type: Number,\r\n  },\r\n  marriedSisters: {\r\n    type: Number,\r\n  },\r\n  sisters: {\r\n    type: Number,\r\n  },\r\n\r\n  // Religious Details\r\n\r\n  dateOfBirth: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  timeOfBirth: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  gothram: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  placeOfBirth: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  religion: {\r\n    type: String,\r\n    trim: true,\r\n  },\r\n\r\n  zodiacSign: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n\r\n  // Preference Details\r\n\r\n  partnerAgeRange: {\r\n    type: [Number],\r\n    default: [21, 50],\r\n  },\r\n  partnerCountry: {\r\n    type: String,\r\n    default: '',\r\n  },\r\n  partnerEatingHabits: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  partnerHeightRange: {\r\n    type: [Number],\r\n    default: [],\r\n  },\r\n  partnerIncomeRange: {\r\n    type: [Number],\r\n    default: [],\r\n  },\r\n  partnerMaritalStatus: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  partnerMotherTongue: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n  partnerReligion: {\r\n    type: String,\r\n    trim: true,\r\n    default: '',\r\n  },\r\n\r\n  phone: {\r\n    type: String,\r\n    default: '',\r\n    trim: true,\r\n    maxlength: [20, 'Phone number can not be longer than 20 characters'],\r\n  },\r\n  createdAt: {\r\n    type: Date,\r\n    default: Date.now(),\r\n  },\r\n  lastModifiedAt: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n  role: {\r\n    type: String,\r\n    default: 'User',\r\n    enum: ['User', 'Admin'],\r\n  },\r\n\r\n  //store Ids of all shortlisted users.\r\n  shortlistedMatches: {\r\n    type: [String],\r\n    default: [],\r\n  },\r\n\r\n  // for each interest received... a unique object is created.\r\n  // Subsequent messages \"to & from\" the sender are stored in conversations array inside the object.\r\n  interestsReceived: [\r\n    {\r\n      interestSenderAge: { type: Number },\r\n      interestSenderId: { type: String },\r\n      interestSenderImage: { type: String },\r\n      interestSenderName: { type: String },\r\n      interestReceiverAge: { type: Number },\r\n      interestReceiverId: { type: String },\r\n      interestReceiverImage: { type: String },\r\n      interestReceiverName: { type: String },\r\n      isAccepted: { type: Boolean, default: false },\r\n      isRejected: { type: Boolean, default: false },\r\n      conversations: [MessageSchema],\r\n    },\r\n  ],\r\n\r\n  // for each interest sent... a unique object is created...\r\n  // Subsequent messages \"to & from\" the receiver are stored in conversations array inside the object\r\n  interestsSent: [\r\n    {\r\n      interestSenderAge: { type: Number },\r\n      interestSenderId: { type: String },\r\n      interestSenderImage: { type: String },\r\n      interestSenderName: { type: String },\r\n      interestReceiverAge: { type: Number },\r\n      interestReceiverId: { type: String },\r\n      interestReceiverImage: { type: String },\r\n      interestReceiverName: { type: String },\r\n      isAccepted: { type: Boolean, default: false },\r\n      isRejected: { type: Boolean, default: false },\r\n      conversations: [MessageSchema],\r\n    },\r\n  ],\r\n});\r\n\r\nmodule.exports = mongoose.model('User', UserSchema);\r\n","const express = require('express');\r\n\r\n//importing controllers\r\nconst { getAllUsersProfiles } = require('../controllers/admin');\r\n\r\nconst router = express.Router();\r\n\r\n//getting all users of pesto-matrimony\r\nrouter.route('/getallusers').get(getAllUsersProfiles);\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\nconst { getMessages, sendMessage, markMessagesAsRead } = require('../controllers/conversations');\r\n\r\nconst router = express.Router();\r\n\r\n// '/' in this router is equivalent to  '/api/v1/conversations'\r\n\r\n// A message is an object in conversations array.\r\n// All of these controller functions are working on that conversations array.\r\nrouter.route('/').post(sendMessage).put(markMessagesAsRead);\r\n\r\nrouter.route('/:oktaUserId').get(getMessages);\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\nconst { acceptInterest, cancelInterest, declineInterest, sendInterest } = require('../controllers/interests');\r\n\r\nconst router = express.Router();\r\n\r\n// '/' in this router is equivalent to  '/api/v1/interests'\r\n\r\nrouter.route('/').post(sendInterest);\r\n\r\nrouter.route('/accept').put(acceptInterest);\r\n\r\nrouter.route('/cancel').put(cancelInterest);\r\n\r\nrouter.route('/decline').put(declineInterest);\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { getRecommendations } = require('../controllers/recommendations');\r\n\r\n// '/' in this router is equivalent to  '/api/v1/recommendations'\r\n\r\nrouter.route('/:oktaUserId').get(getRecommendations);\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { searchProfiles } = require('../controllers/search');\r\n\r\n// '/' in this router is equivalent to  '/api/v1/search'\r\n\r\nrouter.route('/:oktaUserId').post(searchProfiles);\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { toggleShortlist } = require('../controllers/shortlist');\r\n\r\n// '/' in this router is equivalent to  '/api/v1/toggleShortlist'\r\n\r\nrouter.route('/').put(toggleShortlist);\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\n\r\nconst {\r\n  getUserProfile,\r\n  uploadImageToMongoDb,\r\n  updateUserProfile,\r\n  oktaSignUp,\r\n  searchProfiles,\r\n  deleteImage\r\n} = require('../controllers/users');\r\n\r\nconst router = express.Router();\r\n\r\n// '/' in this router is equivalent to  '/api/v1/users'\r\n\r\n// Signup\r\nrouter.route('/oktasignup').post(oktaSignUp);\r\nrouter.route('/userprofile/:id').get(getUserProfile);\r\nrouter.route('/imageupload').post(uploadImageToMongoDb);\r\n\r\n//it was running for the admin\r\n// router.route('/getallusers').get(getAllUsersProfiles)\r\n\r\n// Update / Delete\r\nrouter.route('/:userId').put(updateUserProfile);\r\n\r\n// Fetch User Profiles\r\nrouter.route('/search').get(searchProfiles);\r\n\r\nrouter.route('/delete-image/:userId/:index').delete(deleteImage);\r\n\r\n// Have to create another route & controller function for...\r\n// handling search and filters with pagination..\r\n// This route will have a lot of complex logic.\r\n\r\n// updateUserProfile will only be used to update Profile details...\r\n// NOT messages... although it is possible...\r\n// For message flow... a separate route (conversations) is present\r\n// Update\r\nrouter.route('/:userId').put(updateUserProfile);\r\n\r\nmodule.exports = router;\r\n","class CustomErrorResponse extends Error {\r\n  constructor(message, statusCode) {\r\n    super(message);\r\n    this.statusCode = statusCode;\r\n  }\r\n}\r\n\r\nmodule.exports = CustomErrorResponse;\r\n","module.exports = require(\"@okta/okta-sdk-nodejs\");","module.exports = require(\"@sentry/node\");","module.exports = require(\"@sentry/tracing\");","module.exports = require(\"body-parser\");","module.exports = require(\"cors\");","module.exports = require(\"express\");","module.exports = require(\"mongoose\");","module.exports = require(\"tslib\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const cors = require('cors');\r\nconst express = require('express');\r\nconst dbConnection = require('./config/database');\r\nconst errorHandler = require('./middleware/error');\r\nconst bodyParser = require('body-parser');\r\nconst Sentry = require('@sentry/node');\r\nconst Tracing = require('@sentry/tracing');\r\n\r\n// Connect to MongoDB\r\ndbConnection();\r\n\r\n// Start Express Server\r\nconst app = express();\r\n\r\n// *****************Sentry Code Start*****************\r\nSentry.init({\r\n  dsn: 'https://e1d7d0bf5be74e7b99f42b24a991095a@o1408574.ingest.sentry.io/6744194',\r\n  integrations: [\r\n    // enable HTTP calls tracing\r\n    new Sentry.Integrations.Http({ tracing: true }),\r\n    // enable Express.js middleware tracing\r\n    new Tracing.Integrations.Express({ app }),\r\n  ],\r\n\r\n  // Set tracesSampleRate to 1.0 to capture 100%\r\n  // of transactions for performance monitoring.\r\n  // We recommend adjusting this value in production\r\n  tracesSampleRate: 1.0,\r\n});\r\n\r\n// RequestHandler creates a separate execution context using domains, so that every\r\n// transaction/span/breadcrumb is attached to its own Hub instance\r\napp.use(Sentry.Handlers.requestHandler());\r\n// TracingHandler creates a trace for every incoming request\r\napp.use(Sentry.Handlers.tracingHandler());\r\n\r\n// *****************Sentry Code End*****************\r\n\r\napp.use(cors());\r\n\r\napp.use(express.json());\r\n\r\n// parse application/x-www-form-urlencoded\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\n// parse application/json\r\napp.use(bodyParser.json());\r\n\r\n// importing routes\r\nconst admin = require('./routes/admin.js');\r\nconst conversations = require('./routes/conversations.js');\r\nconst interests = require('./routes/interests.js');\r\nconst recommendations = require('./routes/recommendations.js');\r\nconst search = require('./routes/search.js');\r\nconst toggleShortlist = require('./routes/shortlist.js');\r\nconst users = require('./routes/users.js');\r\n\r\n// mounting routes\r\napp.use('/api/v1/admin', admin);\r\napp.use('/api/v1/conversations', conversations);\r\napp.use('/api/v1/interests', interests);\r\napp.use('/api/v1/recommendations', recommendations);\r\napp.use('/api/v1/search', search);\r\napp.use('/api/v1/toggleShortlist', toggleShortlist);\r\napp.use('/api/v1/users', users);\r\n\r\nconsole.log('mounting routes completed...');\r\n\r\n// *****************Sentry Related*****************\r\n// Sentry Error Handler\r\n// The error handler must be before any other error middleware and after all controllers\r\napp.use(Sentry.Handlers.errorHandler());\r\n\r\n// *****************Sentry Related*****************\r\n\r\n// Custom Error Handler\r\n\r\n//Handling Unhandled routes. it should be placed after the routes.\r\n// app.all('*', (req, res, next) => {\r\n//   res.status(404).json({\r\n//     status: 'fail',\r\n//     message: `Can't find ${req.originalUrl} on this server !`,\r\n//   });\r\n// });\r\n\r\n// error Handling middlewre.\r\napp.use(errorHandler);\r\n\r\nconst server = app.listen(\r\n  process.env.PORT || 8000,\r\n  console.log(`Server is listening on port : ${process.env.PORT || 8000}\\nMode: ${process.env.NODE_ENV.toUpperCase()}`)\r\n);\r\n\r\n// Error in connecting to MongoDB triggers unhandledRejection at global level\r\n// That is being handled here. This stops server if MongoDB is NOT connected.\r\nprocess.on('unhandledRejection', (err, promise) => {\r\n  console.log(`Error: ${err.message}`);\r\n  server.close(() => process.exit(1));\r\n});\r\n"],"names":["mongoose","module","exports","console","log","connect","process","env","MONGO_URI","useNewUrlParser","useUnifiedTopology","asyncHandler","User","CustomErrorResponse","getAllUsersProfiles","req","res","next","allUsers","find","status","json","user","error","sendMessage","oktaUserId1","query","sender","oktaUserId2","receiver","message","body","messageSenderId","messageReceiverId","isRead","session","startSession","startTransaction","user1","oktaUserId","user2","didUser1SendInterestToUser2","interestsSent","some","interest","String","interestReceiverId","didUser1ReceiveInterestFromUser2","interestsReceived","interestSenderId","map","conversations","push","save","commitTransaction","endSession","success","abortTransaction","markMessagesAsRead","getMessages","params","sendInterest","didUser1AlreadySendInterestToUser2","name","didUser1AlreadyReceiveInterestFromUser2","maleImagePlaceholder","femaleImagePlaceholder","interestSenderAge","age","interestSenderImage","images","gender","interestSenderName","interestReceiverAge","interestReceiverImage","interestReceiverName","isAccepted","isRejected","acceptInterest","declineInterest","cancelInterest","filter","getRecommendations","currentUser","currentUserGender","currentUserAge","currentUserReligion","religion","recommendations","$ne","exec","profile","length","number","data","searchProfiles","searchCriteria","Object","keys","forEach","key","undefined","minAge","ageRange","maxAge","minHeight","heightRange","maxHeight","matchingProfiles","height","city","location","country","motherTongue","marriageStatus","state","toggleShortlist","shortlisterOktaId","shortlister","shortlisteeOktaId","shortlistee","wasAlreadyShortlisted","shortlistedMatches","oktaId","okta","findUserByOktaId","oktaSignUp","client","Client","orgUrl","token","response","createUser","mongoUser","id","firstName","lastName","email","create","send","getUserProfile","uploadImageToMongoDb","imageUrl","imageUrlString","currentUserId","imageUrls","updateOne","updateUserProfile","userId","$set","$gte","deleteImage","currentUserOktaId","imageArrayIndex","index","currentUserProfile","splice","err","fn","Promise","resolve","catch","ErrorResponse","code","values","errors","val","join","MessageSchema","Schema","type","trim","maxlength","Boolean","default","timeStamp","Date","now","UserSchema","required","unique","match","aboutMe","Number","weight","physique","citizenship","eatingHabits","smokingHabits","drinkingHabits","hobbies","spokenLanguages","employer","income","occupation","qualification","aboutFamily","brothers","familyStatus","marriedBrothers","marriedSisters","sisters","dateOfBirth","timeOfBirth","gothram","placeOfBirth","zodiacSign","partnerAgeRange","partnerCountry","partnerEatingHabits","partnerHeightRange","partnerIncomeRange","partnerMaritalStatus","partnerMotherTongue","partnerReligion","phone","createdAt","lastModifiedAt","role","enum","model","express","router","Router","route","get","post","put","delete","Error","constructor","statusCode","super","this","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","cors","dbConnection","errorHandler","bodyParser","Sentry","Tracing","app","init","dsn","integrations","Integrations","Http","tracing","Express","tracesSampleRate","use","Handlers","requestHandler","tracingHandler","urlencoded","extended","admin","interests","search","users","server","listen","PORT","toUpperCase","on","promise","close","exit"],"sourceRoot":""}